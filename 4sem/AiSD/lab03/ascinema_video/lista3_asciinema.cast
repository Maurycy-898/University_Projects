{"version": 2, "width": 187, "height": 47, "timestamp": 1651516577, "env": {"SHELL": "/bin/bash", "TERM": "xterm-256color"}}
[0.039303, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705\u001b[00m$ "]
[1.4824, "o", "#"]
[2.282831, "o", " "]
[2.714641, "o", "M"]
[2.954488, "o", "a"]
[3.898871, "o", "u"]
[4.074699, "o", "r"]
[4.218721, "o", "y"]
[4.618534, "o", "c"]
[4.746447, "o", "y"]
[5.194651, "o", " "]
[5.450695, "o", "S"]
[6.122658, "o", "o"]
[6.362622, "o", "s"]
[6.618846, "o", "n"]
[6.714936, "o", "o"]
[6.890774, "o", "w"]
[7.162759, "o", "s"]
[7.322772, "o", "k"]
[7.482963, "o", "i"]
[8.283815, "o", " "]
[8.458759, "o", "-"]
[8.525425, "o", " "]
[8.875111, "o", "l"]
[9.067008, "o", "i"]
[9.275224, "o", "s"]
[9.498961, "o", "t"]
[9.595051, "o", "a"]
[9.995115, "o", " "]
[10.139672, "o", "3"]
[10.475432, "o", "\r\n"]
[10.475482, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705\u001b[00m$ "]
[11.851371, "o", "#"]
[12.058989, "o", " "]
[12.31563, "o", "n"]
[13.291591, "o", "r"]
[13.435555, "o", " "]
[13.67571, "o", "i"]
[13.996083, "o", "n"]
[14.348143, "o", "d"]
[14.443948, "o", "e"]
[14.683524, "o", "k"]
[14.971679, "o", "s"]
[15.211958, "o", "u"]
[16.044716, "o", " "]
[16.939416, "o", "-"]
[17.051662, "o", " "]
[18.012486, "o", "2"]
[18.25176, "o", "6"]
[18.411696, "o", "1"]
[18.956083, "o", "7"]
[19.515859, "o", "0"]
[19.660495, "o", "5"]
[20.076224, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705\u001b[00m$ "]
[24.781496, "o", "l"]
[24.956651, "o", "s"]
[25.181386, "o", "\r\n"]
[25.182799, "o", "\u001b[0m\u001b[01;34mAiSD\u001b[0m\r\n"]
[25.183185, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705\u001b[00m$ "]
[26.237265, "o", "c"]
[26.908595, "o", "d"]
[27.452596, "o", " "]
[28.18938, "o", "A"]
[28.465528, "o", "iSD/"]
[31.725022, "o", "l"]
[31.949055, "o", "a"]
[32.140694, "o", "b"]
[32.813082, "o", "0"]
[33.213103, "o", "3"]
[33.837352, "o", "/"]
[34.125295, "o", "z"]
[35.409993, "o", "adania/"]
[36.365547, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[37.133738, "o", "l"]
[37.261543, "o", "s"]
[37.470059, "o", "\r\n"]
[37.471471, "o", "\u001b[0m\u001b[01;32masc_data_gen\u001b[0m  asc_data_gen.cpp  \u001b[01;32mdesc_data_gen\u001b[0m  desc_data_gen.cpp  \u001b[01;32mrand_data_gen\u001b[0m  rand_data_gen.cpp  zad.cpp\r\n"]
[37.471962, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[40.605818, "o", "#"]
[41.790094, "o", " "]
[41.933966, "o", "z"]
[41.997946, "o", "a"]
[42.669952, "o", "\b\u001b[K"]
[42.814041, "o", "\b\u001b[K"]
[43.261637, "o", "g"]
[43.470217, "o", "e"]
[43.757735, "o", "n"]
[43.885955, "o", "e"]
[44.125963, "o", "r"]
[44.6222, "o", "a"]
[44.830331, "o", "t"]
[45.422163, "o", "o"]
[45.59811, "o", "r"]
[45.838495, "o", "y"]
[46.254384, "o", " "]
[47.63013, "o", "d"]
[47.809077, "o", "a"]
[48.078526, "o", "n"]
[48.334462, "o", "y"]
[48.654195, "o", "c"]
[48.798574, "o", "h"]
[48.958495, "o", " "]
[49.294422, "o", "t"]
[49.966042, "o", "a"]
[50.222552, "o", "k"]
[50.398521, "o", "i"]
[50.542588, "o", "e"]
[50.734557, "o", " "]
[50.958257, "o", "j"]
[51.086566, "o", "a"]
[51.294256, "o", "k"]
[51.56657, "o", " "]
[51.918347, "o", "n"]
[52.062456, "o", "a"]
[52.174238, "o", " "]
[52.62284, "o", "p"]
[52.638839, "o", "o"]
[53.390495, "o", "p"]
[54.254709, "o", "r"]
[54.382948, "o", "z"]
[54.494861, "o", "e"]
[54.782485, "o", "d"]
[55.18295, "o", "n"]
[55.24652, "o", "i"]
[55.438521, "o", "e"]
[55.614439, "o", "j"]
[55.902544, "o", " "]
[56.67136, "o", "l"]
[56.831184, "o", "i"]
[57.664089, "o", "s"]
[57.934441, "o", "c"]
[58.095242, "o", "i"]
[58.319058, "o", "e"]
[58.959444, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[60.735015, "o", "#"]
[61.215169, "o", " "]
[62.687244, "o", "z"]
[62.766904, "o", "a"]
[63.023527, "o", "d"]
[63.231257, "o", "a"]
[63.887913, "o", "b"]
[63.967204, "o", "i"]
[64.097517, "o", "a"]
[64.84739, "o", "\b\u001b[K"]
[65.071315, "o", "\b\u001b[K"]
[65.247164, "o", "\b\u001b[K"]
[66.25521, "o", "n"]
[66.417813, "o", "i"]
[66.511502, "o", "a"]
[67.199116, "o", " "]
[67.583561, "o", "o"]
[67.839556, "o", "d"]
[67.983934, "o", " "]
[68.463654, "o", "1"]
[69.648167, "o", "-"]
[69.743338, "o", "5"]
[71.567761, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[72.735735, "o", "c"]
[72.863999, "o", "a"]
[73.040168, "o", "t"]
[73.520493, "o", " "]
[73.968026, "o", "z"]
[74.032113, "o", "a"]
[74.223656, "o", "d"]
[75.056078, "o", "."]
[75.568291, "o", "c"]
[75.712493, "o", "p"]
[75.85614, "o", "p"]
[76.977987, "o", "\r\n#include <iostream>\r\n#include <stdlib.h>\r\n#include <cstring>\r\n#include <string>\r\n#include <iomanip>\r\n#include <time.h>\r\n#include <random>\r\n\r\nusing namespace std;\r\n\r\n// global random generator\r\nrandom_device rd;\r\nmt19937 mt_gen(rd());\r\nint random(int start, int end);\r\n\r\n// random selection algorithm\r\nint random_select(int arr[], int start, int end, int position_stat);\r\nint basic_partition(int arr[], int start, int end);\r\n\r\n// selection algorithm\r\nint select(int arr[], int start, int end, int position_stat, int sub_arr_size);\r\nint find_median_of_median(int arr[], int start, int end);\r\nint insertion_sort_find_median(int arr[], int start, int end);\r\nint partition(int arr[], int start, int end, int pivot_val);\r\n\r\n//binary search algorithm (works for sorted arrays)\r\nint binary_search(int arr[], int start, int end, int key_val);\r\n\r\n// quick sort algorithms using selection algorithm ideas\r\nvoid new_quick_sort(int arr[], int start, int end, int sub_arr_size = 5);\r\nvoid new_dual_pivot_QS(int arr[], int start, int end"]
[76.978296, "o", ", int sub_arr_size = 5);\r\nvoid partition_DPQS(int arr[], int start, int end,int *left_pivot, int *right_pivot, int pivot_val);\r\n\r\n// helpful functions\r\nvoid print_array(int size, int arr[]);\r\nvoid print_array(int arr, int start, int end);\r\nvoid swap(int *x, int *y);\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nint main(int argc, char **argv) {\r\n   if (argc > 1) {\r\n        string line;\r\n        getline(cin, line);\r\n        int n = stoi(line);\r\n        int array[n];\r\n        \r\n        int i = 0;\r\n        while( i < n && getline(cin, line)) {\r\n            array[i] = stoi(line);\r\n            i++;\r\n        }\r\n        cout << \"\\nReceived size: \" << n << endl;\r\n        cout << \"\\nReceived array:\" << endl;\r\n        print_array(n, array);\r\n    \r\n\r\n        if (strcmp(argv[1], \"random_select\") == 0) {\r\n            int position = random(0, n - 1);\r\n           "]
[76.978371, "o", " int result = random_select(array, 0, n - 1, position);\r\n            cout << \"\\nAray after random select: \" << endl;\r\n            print_array(n, array);\r\n            new_quick_sort(array, 0, n - 1);\r\n            cout << \"\\n Sorted aray: \" << endl;\r\n            print_array(n, array);\r\n            cout << \"\\nRandom select result for random position: \" << position << \" =  \" << result << endl;\r\n            cout << \"Expected result : array[\" << position << \"] = \" << array[position] << \"\\n\" << endl;\r\n        } \r\n        else if (strcmp(argv[1], \"select\") == 0) {\r\n            int position = random(0, n - 1);\r\n            int result = select(array, 0, n - 1, position, 5);\r\n            cout << \"\\nAray after select: \" << endl;\r\n            print_array(n, array);\r\n            new_quick_sort(array, 0, n - 1);\r\n            cout << \"\\n Sorted aray: \" << endl;\r\n            print_array(n, array);\r\n            cout << \"\\nSelect result for random position: \" << position << \" =  \" << result << endl;\r\n            cout << \"Expect"]
[76.978626, "o", "ed result : array[\" << position << \"] = \" << array[position] << \"\\n\" << endl;\r\n        }\r\n        else if (strcmp(argv[1], \"binary_search\") == 0) {\r\n            int position = random(0, n - 1);\r\n            int searched_val = array[position];\r\n            new_quick_sort(array, 0, n - 1);\r\n            cout << \"\\n Sorted aray: \" << endl;\r\n            print_array(n, array);\r\n            cout << \"Searching for value : \" << searched_val << endl;\r\n            int result = binary_search(array, 0, n - 1, searched_val);\r\n            cout << \"\\nBinary search returned index = \" << result << endl;\r\n            cout << \"Check result : array[\" << result << \"] = \" << array[result] << \"\\n\" << endl;\r\n        } \r\n        else if (strcmp(argv[1], \"new_quick_sort\") == 0) {\r\n            cout << \"Array before new quick sort:\" << endl;\r\n            print_array(n, array);\r\n            new_quick_sort(array, 0, n - 1);\r\n            cout << \"\\nAray after new quick sort:\" << endl;\r\n            print_array(n, array);\r\n        } \r\n       "]
[76.978723, "o", " else if (strcmp(argv[1], \"new_dual_pivot\") == 0) {\r\n            cout << \"Array before new dual pivot quicksort: \" << endl;\r\n            print_array(n, array);\r\n            new_dual_pivot_QS(array, 0, n - 1);\r\n            cout << \"\\nAray after new dual pivot quick sort:\" << endl;\r\n            print_array(n, array);\r\n        } \r\n        else {\r\n            cout << \"\\nPass type of algorithm you want to use as an argument\" << endl;\r\n            cout << \"Available types: random_select, select, binary_search, new_quick_sort, new_dual_pivot\" << endl;\r\n            cout << \"Usage: \\\"./$this_program $algorithm_type\\\" \";\r\n            cout << \" ,or: \\\"./$data_generator $array_lenght | ./$this_program $algorithm_type\\n\" << endl;\r\n\r\n            return 0;\r\n        }\r\n\r\n    }\r\n    else {\r\n        cout << \"\\nPass type of algorithm you want to use as an argument\" << endl;\r\n        cout << \"Available types: random_select, select, binary_search, new_quick_sort, new_dual_pivot\" << endl;\r\n        cout << \"Usage: \\\"./$this_program"]
[76.97886, "o", " $algorithm_type\\\" \";\r\n        cout << \" ,or: \\\"./$data_generator $array_lenght | ./$this_program $algorithm_type\\n\" << endl;\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n/**\r\n * @brief returns element that would be on given position in the sorted array\r\n * given position stat should be between [0...(n - 1)] where n is the array size\r\n * In other worlds returns @position_stat smallest element (starting from zero)\r\n */\r\nint random_select(int arr[], int start, int end, int position_stat) {\r\n    if (start == end) return arr[start];\r\n\r\n    int pivot = basic_partition(arr, start, end);\r\n\r\n    int pivot_position_stat = pivot - start;\r\n    \r\n    if (pivot_position_stat > position_stat) return random_select(arr, start, pivot - 1, position_stat);\r\n\r\n    else if (pivot_position_stat < position_stat) return random_select(arr, "]
[76.97913, "o", "pivot + 1, end, position_stat - pivot_position_stat - 1);\r\n\r\n    else return arr[pivot];\r\n}\r\n\r\n\r\n/**\r\n * @brief basic partition, takes array last element value as pivot\r\n * \r\n */\r\nint basic_partition(int arr[], int start, int end) {\r\n    int new_pivot = start;\r\n    int pivot_value = arr[end];\r\n\r\n    for (int j = start; j < end; j++) {\r\n        if (arr[j] <= pivot_value) {\r\n            if (new_pivot != j) {\r\n                swap(&arr[new_pivot], &arr[j]);\r\n            }\r\n            new_pivot++;\r\n        } \r\n    }\r\n    swap(&arr[new_pivot], &arr[end]);\r\n\r\n    return new_pivot;\r\n}\r\n\r\n\r\n/**\r\n * @brief returns element that would be on given position in the sorted array\r\n * given position stat should be between [0...(n - 1)] where n is the array size\r\n * In other worlds returns @position_stat smallest element (starting from zero)\r\n * \r\n */\r\nint select(int arr[], int start, int end, int position_stat, int sub_arr_size = 5) {\r\n    if (start == end) return arr[start];\r\n    \r\n    int arr_size = end - start + 1;\r\n    i"]
[76.979225, "o", "nt median_arr_size = (arr_size + sub_arr_size - 1) / sub_arr_size;\r\n    int median_arr[median_arr_size];\r\n\r\n    int temp_start = start;\r\n    int temp_end = start + sub_arr_size - 1;\r\n    for (int i = 0; i < arr_size / sub_arr_size; i++) {\r\n        median_arr[i] = insertion_sort_find_median(arr, temp_start, temp_end);\r\n            \r\n        temp_start += sub_arr_size;\r\n        temp_end += sub_arr_size;\r\n    }\r\n\r\n    // when last part is shorter than sub_arr size\r\n    if (arr_size % sub_arr_size != 0) { \r\n        median_arr[median_arr_size - 1] = insertion_sort_find_median(arr, temp_start, end);\r\n    }\r\n\r\n    // find median of medians using same method\r\n    int median_of_median = select(median_arr, 0, (median_arr_size - 1), (median_arr_size - 1) / 2, sub_arr_size);\r\n\r\n    int pivot = partition(arr, start, end, median_of_median);\r\n\r\n    int pivot_position_stat = pivot - start;\r\n\r\n    if (pivot_position_stat > position_stat) return select(arr, start, pivot - 1, position_stat, sub_arr_size);\r\n\r\n    else if (pivot_"]
[76.979286, "o", "position_stat < position_stat) return select(arr, pivot + 1, end, position_stat - pivot_position_stat - 1, sub_arr_size);\r\n\r\n    else return arr[pivot];\r\n}\r\n\r\n\r\n/**\r\n * @brief Sorts given sub-array or array using insertion sort.\r\n * Returns median from sorted fragment.\r\n * \r\n */\r\nint insertion_sort_find_median(int arr[], int start, int end) {\r\n    for (int i = start + 1; i <= end; i++) {\r\n        int key = arr[i];\r\n        int j = i;\r\n        while (arr[j - 1] > key && j > start) {\r\n            arr[j] = arr[j - 1];\r\n            j--;\r\n        }\r\n        arr[j] = key;\r\n    }\r\n\r\n    return arr[start + (end - start) / 2];\r\n}\r\n\r\n\r\n/**\r\n * @brief partition, takes passed value as pivot. \r\n * First searches array for given pivot and swaps it with last element\r\n * then same as @basic_partition\r\n * \r\n */\r\nint partition(int arr[], int start, int end, int pivot_val) {\r\n    for (int i = start; i <= end ; i++) {\r\n        if (arr[i] == pivot_val) {\r\n            swap(&arr[i], &arr[end]);\r\n            break;\r\n        }\r\n    }"]
[76.979377, "o", "\r\n\r\n    int new_pivot = start;\r\n    int pivot_value = arr[end];\r\n\r\n    for (int j = start; j < end; j++) {\r\n        if (arr[j] <= pivot_value) {\r\n            if (new_pivot != j) {\r\n                swap(&arr[new_pivot], &arr[j]);\r\n            }\r\n            new_pivot++;\r\n        } \r\n    }\r\n    swap(&arr[new_pivot], &arr[end]);\r\n\r\n    return new_pivot;\r\n}\r\n\r\n\r\n/**\r\n * @brief Binary search for sorted arrays\r\n * Founds array index for given key value if exists\r\n * Otherwise returns -1\r\n *\r\n */\r\nint binary_search(int arr[], int start, int end, int key_val) {\r\n    if (end > 0) {\r\n        int middle = start + (end - start) / 2;\r\n\r\n        if (arr[middle] > key_val) return binary_search(arr, start, middle - 1, key_val);\r\n\r\n        else if (arr[middle] < key_val) return binary_search(arr,middle + 1, end, key_val);\r\n\r\n        else return middle;\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\n\r\n/**\r\n * @brief implementation of quick sort algorithm\r\n * sub arr size = 5 by default\r\n * pivot is choosen like in selection algorithm\r\n * \r\n *"]
[76.979874, "o", "/\r\nvoid new_quick_sort(int arr[], int start, int end, int sub_arr_size) {\r\n    if (start < end) {\r\n        int arr_size = end - start + 1;\r\n        int median_arr_size = (arr_size + sub_arr_size - 1) / sub_arr_size;\r\n        int median_arr[median_arr_size];\r\n\r\n        int temp_start = start;\r\n        int temp_end = start + sub_arr_size - 1;\r\n        for (int i = 0; i < arr_size / sub_arr_size; i++) {\r\n            median_arr[i] = insertion_sort_find_median(arr, temp_start, temp_end);\r\n            \r\n            temp_start += sub_arr_size;\r\n            temp_end += sub_arr_size;\r\n        }\r\n\r\n        // when last part is shorter than sub_arr size\r\n        if (arr_size % sub_arr_size != 0) { \r\n            median_arr[median_arr_size - 1] = insertion_sort_find_median(arr, temp_start, end);\r\n        }\r\n\r\n        // find median of medians using same method\r\n        int median_of_median = select(median_arr, 0, median_arr_size - 1, median_arr_size / 2, sub_arr_size);\r\n\r\n        // estimate pivot using founded value\r\n   "]
[76.97997, "o", "     int pivot = partition(arr, start, end, median_of_median);\r\n\r\n        new_quick_sort(arr, start, pivot - 1, sub_arr_size);\r\n        new_quick_sort(arr, pivot + 1, end, sub_arr_size);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @brief implementation of dual pivot quick sort algorithm\r\n * sub arr size is = 5 by default\r\n * one pivot is choosen like in selection algorithm the second is random\r\n * \r\n */\r\nvoid new_dual_pivot_QS(int arr[], int start, int end, int sub_arr_size) {\r\n    if (start < end) {\r\n        int arr_size = end - start + 1;\r\n        int median_arr_size = (arr_size + sub_arr_size - 1) / sub_arr_size;\r\n        int median_arr[median_arr_size];\r\n\r\n        int temp_start = start;\r\n        int temp_end = start + sub_arr_size - 1;\r\n        for (int i = 0; i < arr_size / sub_arr_size; i++) {\r\n            median_arr[i] = insertion_sort_find_median(arr, temp_start, temp_end);\r\n            \r\n            temp_start += sub_arr_size;\r\n            temp_end += sub_arr_size;\r\n        }\r\n\r\n        // when last part is shorter than"]
[76.980054, "o", " sub_arr size\r\n        if (arr_size % sub_arr_size != 0) { \r\n            median_arr[median_arr_size - 1] = insertion_sort_find_median(arr, temp_start, end);\r\n        }\r\n\r\n        // find median of medians using same method\r\n        int median_of_median = select(median_arr, 0, median_arr_size - 1, median_arr_size / 2, sub_arr_size);\r\n        \r\n        int left_pivot, right_pivot;\r\n        partition_DPQS(arr, start, end, &left_pivot, &right_pivot, median_of_median);\r\n\r\n        new_dual_pivot_QS(arr, start, left_pivot - 1, sub_arr_size);\r\n        new_dual_pivot_QS(arr, left_pivot + 1, right_pivot - 1, sub_arr_size);\r\n        new_dual_pivot_QS(arr, right_pivot + 1, end, sub_arr_size);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @brief partition for dual pivot quick sort\r\n * changes right pivot, returns left pivot\r\n * \r\n */\r\nvoid partition_DPQS(int arr[], int start, int end, int *left_pivot, int *right_pivot, int pivot_val) {\r\n    for (int i = start; i <= end ; i++) {\r\n        if (arr[i] == pivot_val) {\r\n            swap(&arr[i], &arr"]
[76.980128, "o", "[end]);\r\n            break;\r\n        }\r\n    }\r\n    \r\n    if (arr[start] > arr[end]) {\r\n        swap(&arr[start], &arr[end]);\r\n    }\r\n\r\n    int left_pivot_val = arr[start]; \r\n    int right_pivot_val = arr[end];\r\n\r\n    int new_left_pivot = start + 1;\r\n    int new_right_pivot = end - 1;\r\n\r\n    for(int i = start + 1; i <= new_right_pivot; i++) {\r\n        if (arr[i] < left_pivot_val) {\r\n            if (i != new_left_pivot) {\r\n                swap(&arr[i], &arr[new_left_pivot]);\r\n            }\r\n            new_left_pivot++;\r\n        }\r\n        else if (arr[i] >= right_pivot_val) {\r\n            while (arr[new_right_pivot] > right_pivot_val && i < new_right_pivot) {\r\n                new_right_pivot--;\r\n            }\r\n           \r\n            swap(&arr[i], &arr[new_right_pivot]);\r\n            new_right_pivot--;\r\n\r\n            if (arr[i] < left_pivot_val) {\r\n                swap(&arr[i], &arr[new_left_pivot]);\r\n                new_left_pivot++;\r\n            }\r\n        }\r\n    }\r\n    new_left_pivot--;\r\n    new_right_pivo"]
[76.980219, "o", "t++;\r\n \r\n    swap(&arr[start], &arr[new_left_pivot]);\r\n    swap(&arr[end], &arr[new_right_pivot]);\r\n \r\n    *right_pivot = new_right_pivot;\r\n    *left_pivot = new_left_pivot;\r\n}\r\n\r\n\r\n/**\r\n * @brief Swaps values of two given integers \r\n * \r\n */\r\nvoid swap(int *x, int *y) {\r\n    int tmp = *x;\r\n    *x = *y;\r\n    *y = tmp;\r\n}\r\n\r\n\r\n/**\r\n * @brief generates random number in given range\r\n * and uses uniform distribution to do so\r\n * \r\n */\r\nint random(int start, int end) {\r\n    uniform_int_distribution<> rand_val(start, end);\r\n    return rand_val(mt_gen);\r\n}\r\n\r\n\r\n/**\r\n * @brief prints given array when its size is  < 50\r\n * \r\n */\r\nvoid print_array(int size, int arr[]) {\r\n    if (size <= 50) {\r\n        for(int i = 0; i < size; i++) {  \r\n            cout << setw(2) << arr[i] << \", \";\r\n        }\r\n        cout << \"\\n\\n\";\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @brief prints given fragment of the given array\r\n * \r\n */\r\nvoid print_array(int arr[], int start, int end) {\r\n    if (end - start <= 50) {\r\n        for (int i = start; i <= end; i++)"]
[76.980286, "o", "{\r\n            cout << setw(2) << arr[i] << \", \";\r\n        }\r\n        cout << \"\\n\\n\";\r\n    }\r\n}\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[80.20877, "o", "#"]
[82.448564, "o", " "]
[82.784797, "o", "k"]
[82.880523, "o", "o"]
[83.152243, "o", "m"]
[83.61717, "o", "p"]
[84.89642, "o", "i"]
[85.265149, "o", "l"]
[85.457054, "o", "a"]
[85.889056, "o", "c"]
[86.049148, "o", "j"]
[86.20925, "o", "a"]
[87.536973, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[89.457447, "o", "g"]
[91.089525, "o", "+"]
[91.249619, "o", "+"]
[91.713389, "o", " "]
[92.305079, "o", "z"]
[92.353622, "o", "a"]
[92.929792, "o", "d"]
[94.193178, "o", "."]
[94.641788, "o", "c"]
[95.185776, "o", "p"]
[95.40964, "o", "p"]
[96.087651, "o", "\b"]
[96.587058, "o", "\b"]
[96.617676, "o", "\b"]
[96.649004, "o", "\b"]
[96.679965, "o", "\b"]
[96.710773, "o", "\b"]
[96.741851, "o", "\b"]
[97.793803, "o", "-zad.cpp\b\b\b\b\b\b\b"]
[98.018154, "o", "ozad.cpp\b\b\b\b\b\b\b"]
[98.514069, "o", " zad.cpp\b\b\b\b\b\b\b"]
[100.361224, "o", "\u001b[C"]
[101.66591, "o", "\b"]
[102.615, "o", "\b"]
[102.965138, "o", "\u001b[C"]
[103.393708, "o", "\b\u001b[1Pzad.cpp\b\b\b\b\b\b\b"]
[103.58609, "o", "\b\u001b[1Pzad.cpp\b\b\b\b\b\b\b"]
[104.146227, "o", "\b\u001b[1Pzad.cpp\b\b\b\b\b\b\b"]
[104.614778, "o", "\u001b[C"]
[105.115946, "o", "\u001b[C"]
[105.146671, "o", "\u001b[C"]
[105.176592, "o", "\u001b[C"]
[105.207306, "o", "\u001b[C"]
[105.238153, "o", "\u001b[C"]
[105.269069, "o", "\u001b[C"]
[106.114248, "o", " "]
[106.258051, "o", "-"]
[106.530384, "o", "o"]
[107.042196, "o", " "]
[108.338633, "o", "z"]
[108.466656, "o", "a"]
[108.738376, "o", "d"]
[110.48267, "o", "\r\n"]
[111.409731, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[114.003037, "o", "l"]
[114.130872, "o", "s"]
[114.386565, "o", "\r\n"]
[114.387867, "o", "\u001b[0m\u001b[01;32masc_data_gen\u001b[0m  asc_data_gen.cpp  \u001b[01;32mdesc_data_gen\u001b[0m  desc_data_gen.cpp  \u001b[01;32mrand_data_gen\u001b[0m  rand_data_gen.cpp  \u001b[01;32mzad\u001b[0m  zad.cpp\r\n"]
[114.388463, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[116.578497, "o", "#"]
[117.491289, "o", " "]
[117.746813, "o", "u"]
[118.178835, "o", "r"]
[118.403388, "o", "u"]
[119.059932, "o", "c"]
[119.234895, "o", "h"]
[119.683363, "o", "o"]
[120.131034, "o", "m"]
[120.339375, "o", "i"]
[120.61128, "o", "e"]
[121.18683, "o", "n"]
[121.346861, "o", "i"]
[122.115585, "o", "a"]
[122.643431, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[123.987395, "o", "#"]
[124.756608, "o", " "]
[125.091062, "o", "z"]
[125.187007, "o", "a"]
[125.379264, "o", "d"]
[126.388066, "o", "1"]
[127.363921, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[129.235056, "o", "."]
[129.316082, "o", "/"]
[130.531415, "o", "z"]
[130.612124, "o", "a"]
[130.820015, "o", "d"]
[131.364256, "o", "\r\n"]
[131.366511, "o", "\r\nPass type of algorithm you want to use as an argument\r\nAvailable types: random_select, select, binary_search, new_quick_sort, new_dual_pivot\r\nUsage: \"./$this_program $algorithm_type\"  ,or: \"./$data_generator $array_lenght | ./$this_program $algorithm_type\r\n\r\n"]
[131.366998, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[135.123976, "o", "."]
[135.254217, "o", "/"]
[142.933016, "o", "r"]
[143.492799, "o", "a"]
[144.772607, "o", "n"]
[144.869022, "o", "d_data_gen "]
[148.373022, "o", "5"]
[148.484558, "o", "0"]
[150.181301, "o", " "]
[150.773086, "o", "|"]
[151.349597, "o", " "]
[151.989082, "o", "."]
[152.085329, "o", "/"]
[153.061923, "o", "z"]
[153.093222, "o", "a"]
[153.476999, "o", "d"]
[154.357539, "o", " "]
[155.813612, "o", "r"]
[156.341231, "o", "a"]
[156.565119, "o", "n"]
[156.933514, "o", "d"]
[157.093397, "o", "o"]
[157.333662, "o", "m"]
[159.749532, "o", "_"]
[160.37435, "o", "s"]
[160.549258, "o", "e"]
[160.853838, "o", "l"]
[160.965627, "o", "e"]
[161.349815, "o", "c"]
[161.541319, "o", "t"]
[162.616214, "o", "\r\n"]
[162.619592, "o", "\r\nReceived size: 50\r\n\r\nReceived array:\r\n"]
[162.620116, "o", "84, 35, 29, 45, 24, 31, 85,  6, 95, 89, 92, 10, 49, 82,  5, 18, 13, 54, 59, 34, 54, 76,  1, 72, 10, 66, 70,  1, 72, 63,  7,  0, 14, 65, 54,  5, 76,  0, 82,  0, 59, 91, 46, 95, 99, 37, 42, 70, 51, 46, \r\n\r\n\r\nAray after random select: \r\n"]
[162.62064, "o", " 0,  0,  0,  5,  1,  1,  5,  6,  7, 10, 10, 13, 14, 18, 24, 31, 34, 29, 35, 37, 42, 45, 46, 46, 49, 66, 70, 82, 72, 63, 84, 95, 89, 65, 54, 54, 76, 59, 82, 92, 59, 91, 54, 95, 99, 76, 85, 70, 51, 72, \r\n\r\n\r\n"]
[162.621131, "o", " Sorted aray: \r\n 0,  0,  0,  1,  1,  5,  5,  6,  7, 10, 10, 13, 14, 18, 24, 29, 31, 34, 35, 37, 42, 45, 46, 46, 49, 51, 54, 54, 54, 59, 59, 63, 65, 66, 70, 70, 72, 72, 76, 76, 82, 82, 84, 85, 89, 91, 92, 95, 95, 99, "]
[162.621665, "o", "\r\n\r\n\r\nRandom select result for random position: 11 =  13\r\nExpected result : array[11] = 13\r\n\r\n"]
[162.622888, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[168.714396, "o", "./rand_data_gen 50 | ./zad random_select"]
[170.043361, "o", "\b"]
[170.543732, "o", "\b"]
[170.574021, "o", "\b"]
[170.605031, "o", "\b"]
[170.635259, "o", "\b"]
[170.666776, "o", "\b"]
[170.69715, "o", "\b"]
[171.003096, "o", "\u001b[C"]
[171.846651, "o", "\b\u001b[1Pselect\b\b\b\b\b\b"]
[172.006248, "o", "\b\u001b[1Pselect\b\b\b\b\b\b"]
[172.166388, "o", "\b\u001b[1Pselect\b\b\b\b\b\b"]
[172.326203, "o", "\b\u001b[1Pselect\b\b\b\b\b\b"]
[172.50257, "o", "\b\u001b[1Pselect\b\b\b\b\b\b"]
[172.694497, "o", "\b\u001b[1Pselect\b\b\b\b\b\b"]
[172.966372, "o", "\b\u001b[1Pselect\b\b\b\b\b\b"]
[173.975544, "o", "\r\n"]
[173.977639, "o", "\r\nReceived size: 50\r\n\r\nReceived array:\r\n"]
[173.978058, "o", "93, 14, 42, 78, 47, 92, 82, 44, 30, 72, 49, 56, 82, 30, 47, 92,  2, 57, 39, 45,  6, 36, 37, 11, 24,  9, 81, 94, 53, 44, 31, 16, 49,  4, 35, 93, 38, 54, 96, 93, 66, 19, 80, 76, 72, 33, 39, 62, 87, 56, \r\n\r\n\r\nAray after select: \r\n"]
[173.978387, "o", "14, 30,  2, 30,  6, 11, 24,  4,  9, 16, 31, 19, 33, 35, 36, 37, 38, 39, 39, 42, 47, 49, 44, 44, 47, 45, 49, 53, 81, 94, 92, 57, 92, 78, 93, 87, 54, 93, 93, 96, 56, 66, 72, 76, 80, 82, 72, 56, 62, 82, \r\n\r\n\r\n Sorted aray: \r\n"]
[173.978683, "o", " 2,  4,  6,  9, 11, 14, 16, 19, 24, 30, 30, 31, 33, 35, 36, 37, 38, 39, 39, 42, 44, 44, 45, 47, 47, 49, 49, 53, 54, 56, 56, 57, 62, 66, 72, 72, 76, 78, 80, 81, 82, 82, 87, 92, 92, 93, 93, 93, 94, 96, \r\n\r\n\r\nSelect result for random position: 18 =  39\r\nExpected result : array[18] = 39\r\n\r\n"]
[173.979573, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[181.71847, "o", "#"]
[184.087212, "o", " "]
[185.478717, "o", "z"]
[185.542777, "o", "a"]
[185.91136, "o", "d"]
[204.311819, "o", "4"]
[204.872224, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[205.82069, "o", "# zad4"]
[206.04505, "o", "\b\b\b\b\b\b./rand_data_gen 50 | ./zad select"]
[208.056642, "o", "\b\u001b[K"]
[208.296168, "o", "\b\u001b[K"]
[208.504365, "o", "\b\u001b[K"]
[208.680426, "o", "\b\u001b[K"]
[208.872611, "o", "\b\u001b[K"]
[209.047749, "o", "\b\u001b[K"]
[211.965877, "o", "random_select"]
[212.4133, "o", "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bzad\u001b[K"]
[213.2751, "o", "\r\n\r\nPass type of algorithm you want to use as an argument\r\nAvailable types: random_select, select, binary_search, new_quick_sort, new_dual_pivot\r\nUsage: \"./$this_program $algorithm_type\"  ,or: \"./$data_generator $array_lenght | ./$this_program $algorithm_type\r\n\r\n"]
[213.275523, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[215.645117, "o", "./zad"]
[216.185559, "o", "\b\b\b\b\b# zad4"]
[216.573049, "o", "\b\b\b\b\b\b./rand_data_gen 50 | ./zad "]
[217.388297, "o", "\b"]
[218.253082, "o", "\u001b[C"]
[219.192521, "o", "b"]
[219.368578, "o", "i"]
[219.768901, "o", "n"]
[220.841041, "o", "a"]
[221.176994, "o", "r"]
[221.416611, "o", "y"]
[222.056595, "o", "_"]
[222.520694, "o", "s"]
[222.680613, "o", "e"]
[223.225083, "o", "a"]
[223.528623, "o", "r"]
[223.945302, "o", "c"]
[224.072888, "o", "h"]
[226.268122, "o", "\r\n"]
[226.2685, "o", "\r\n"]
[226.268764, "o", "Received size: 50"]
[226.268931, "o", "\r\n"]
[226.269158, "o", "\r\n"]
[226.269319, "o", "Received array:"]
[226.269464, "o", "\r\n"]
[226.269658, "o", "83, 19, 99, 30, 86, 53, 43, 98, 67, 89, 51, 20, 68, 22, 11, 63,  9, 19, 15, 75, 44, 83, 51, 54, 64, 87, 77, 86, 69, 59, 77, 43, 86, 52, 58, 54,  0, 84, 68,  0,  9, 29, 27, 61, 18, 23, 90, 64,  0, 22, "]
[226.269803, "o", "\r\n"]
[226.269936, "o", "\r\n"]
[226.270115, "o", "\r\n"]
[226.270405, "o", " Sorted aray: "]
[226.270719, "o", "\r\n"]
[226.27095, "o", " 0,  0,  0,  9,  9, 11, 15, 18, 19, 19, 20, 22, 22, 23, 27, 29, 30, 43, 43, 44, 51, 51, 52, 53, 54, 54, 58, 59, 61, 63, 64, 64, 67, 68, 68, 69, 75, 77, 77, 83, 83, 84, 86, 86, 86, 87, 89, 90, 98, 99, "]
[226.271155, "o", "\r\n"]
[226.271351, "o", "\r\n"]
[226.271536, "o", "Searching for value : 22"]
[226.271787, "o", "\r\n"]
[226.271979, "o", "\r\n"]
[226.272227, "o", "Binary search returned index = 11"]
[226.272413, "o", "\r\n"]
[226.27261, "o", "Check result : array[11] = 22"]
[226.272817, "o", "\r\n"]
[226.273008, "o", "\r\n"]
[226.273819, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[230.862256, "o", "./rand_data_gen 50 | ./zad binary_search"]
[231.531633, "o", "\r\n"]
[231.532016, "o", "\r\n"]
[231.532233, "o", "Received size: 50"]
[231.532395, "o", "\r\n"]
[231.532593, "o", "\r\n"]
[231.532744, "o", "Received array:"]
[231.53289, "o", "\r\n"]
[231.533123, "o", "41, 92, 27, 34, 35, 81, 79,  2, 25, 47, 64, 79, 79,  7, 20, 30, 97, 99, 67, 55, 50, 45, 87, 47, 84,  5, 53, 23, 91, 65, 56, 47, 66, 48, 47, 36, 23,  0, 43, 77, 83,  4, 78, 74, 58, 56, 88, 81, 86, 21, "]
[231.53328, "o", "\r\n"]
[231.533456, "o", "\r\n"]
[231.533629, "o", "\r\n"]
[231.533803, "o", " Sorted aray: "]
[231.534113, "o", "\r\n"]
[231.534395, "o", " 0,  2,  4,  5,  7, 20, 21, 23, 23, 25, 27, 30, 34, 35, 36, 41, 43, 45, 47, 47, 47, 47, 48, 50, 53, 55, 56, 56, 58, 64, 65, 66, 67, 74, 77, 78, 79, 79, 79, 81, 81, 83, 84, 86, 87, 88, 91, 92, 97, 99, "]
[231.534626, "o", "\r\n"]
[231.534854, "o", "\r\n"]
[231.535022, "o", "Searching for value : 21"]
[231.53522, "o", "\r\n"]
[231.535438, "o", "\r\n"]
[231.53564, "o", "Binary search returned index = 6"]
[231.535845, "o", "\r\n"]
[231.536086, "o", "Check result : array[6] = 21"]
[231.536278, "o", "\r\n"]
[231.536492, "o", "\r\n"]
[231.537213, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[236.025739, "o", "#"]
[237.018018, "o", " "]
[237.193482, "o", "z"]
[237.273606, "o", "a"]
[237.481389, "o", "d"]
[238.970176, "o", "5"]
[239.226668, "o", "\r\n"]
[239.226827, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[240.093763, "o", "# zad5"]
[240.690949, "o", "\b\b\b\b\b\b./rand_data_gen 50 | ./zad binary_search"]
[242.266231, "o", "\b\u001b[K"]
[242.767015, "o", "\b\u001b[K"]
[242.797889, "o", "\b\u001b[K"]
[242.834688, "o", "\b\u001b[K"]
[242.863311, "o", "\b\u001b[K"]
[242.89642, "o", "\b\u001b[K"]
[242.927535, "o", "\b\u001b[K"]
[242.957034, "o", "\b\u001b[K"]
[242.987839, "o", "\b\u001b[K"]
[243.22585, "o", "\b\u001b[K"]
[243.402131, "o", "\b\u001b[K"]
[243.577726, "o", "\b\u001b[K"]
[243.753869, "o", "\b\u001b[K"]
[245.20987, "o", "\b\u001b[K"]
[245.834264, "o", " "]
[246.298412, "o", "n"]
[246.713649, "o", "e"]
[246.905721, "o", "w"]
[248.090142, "o", "_"]
[249.882318, "o", "q"]
[250.249707, "o", "u"]
[250.381017, "o", "i"]
[250.682343, "o", "c"]
[250.922381, "o", "k"]
[251.962224, "o", "_"]
[252.26665, "o", "s"]
[252.474723, "o", "o"]
[252.890852, "o", "r"]
[253.082076, "o", "t"]
[255.244651, "o", "\r\n"]
[255.245156, "o", "\r\n"]
[255.245432, "o", "Received size: 50"]
[255.245605, "o", "\r\n"]
[255.245768, "o", "\r\n"]
[255.245952, "o", "Received array:"]
[255.24612, "o", "\r\n"]
[255.24635, "o", "65, 56, 92, 82, 66, 83, 71, 24, 20, 13, 39, 92, 34, 88, 41, 97, 54, 82, 22, 46, 73, 47, 66, 78, 15, 81, 78, 79,  5, 98, 85,  9, 81, 47, 51, 99, 83, 11, 31,  0, 36, 39,  4, 26, 53, 98, 23, 95, 33,  2, "]
[255.246579, "o", "\r\n"]
[255.246813, "o", "\r\n"]
[255.247042, "o", "Array before new quick sort:"]
[255.247222, "o", "\r\n"]
[255.247482, "o", "65, 56, 92, 82, 66, 83, 71, 24, 20, 13, 39, 92, 34, 88, 41, 97, 54, 82, 22, 46, 73, 47, 66, 78, 15, 81, 78, 79,  5, 98, 85,  9, 81, 47, 51, 99, 83, 11, 31,  0, 36, 39,  4, 26, 53, 98, 23, 95, 33,  2, "]
[255.247659, "o", "\r\n"]
[255.247846, "o", "\r\n"]
[255.248033, "o", "\r\n"]
[255.248207, "o", "Aray after new quick sort:"]
[255.248432, "o", "\r\n"]
[255.248641, "o", " 0,  2,  4,  5,  9, 11, 13, 15, 20, 22, 23, 24, 26, 31, 33, 34, 36, 39, 39, 41, 46, 47, 47, 51, 53, 54, 56, 65, 66, 66, 71, 73, 78, 78, 79, 81, 81, 82, 82, 83, 83, 85, 88, 92, 92, 95, 97, 98, 98, 99, "]
[255.248814, "o", "\r\n"]
[255.248969, "o", "\r\n"]
[255.24967, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[257.51974, "o", "./rand_data_gen 50 | ./zad new_quick_sort"]
[258.154559, "o", "\r\n"]
[258.158402, "o", "\r\n"]
[258.159017, "o", "Received size: 50"]
[258.159344, "o", "\r\n"]
[258.159611, "o", "\r\n"]
[258.159845, "o", "Received array:"]
[258.160032, "o", "\r\n"]
[258.160275, "o", "58,  9, 16, 45, 12, 25, 54, 20, 95, 39, 38, 32, 88, 80, 26, 84,  7, 15,  5, 87, 76, 54, 44, 52, 35, 48, 17, 37, 58, 49, 20,  7, 84,  6, 49,  0, 56,  0,  6, 92, 96, 33, 16, 98, 93, 65, 26, 39, 93, 34, "]
[258.160483, "o", "\r\n"]
[258.160674, "o", "\r\n"]
[258.160869, "o", "Array before new quick sort:"]
[258.161029, "o", "\r\n"]
[258.161288, "o", "58,  9, 16, 45, 12, 25, 54, 20, 95, 39, 38, 32, 88, 80, 26, 84,  7, 15,  5, 87, 76, 54, 44, 52, 35, 48, 17, 37, 58, 49, 20,  7, 84,  6, 49,  0, 56,  0,  6, 92, 96, 33, 16, 98, 93, 65, 26, 39, 93, 34, "]
[258.161458, "o", "\r\n"]
[258.161638, "o", "\r\n"]
[258.161811, "o", "\r\n"]
[258.161994, "o", "Aray after new quick sort:"]
[258.162197, "o", "\r\n"]
[258.162416, "o", " 0,  0,  5,  6,  6,  7,  7,  9, 12, 15, 16, 16, 17, 20, 20, 25, 26, 26, 32, 33, 34, 35, 37, 38, 39, 39, 44, 45, 48, 49, 49, 52, 54, 54, 56, 58, 58, 65, 76, 80, 84, 84, 87, 88, 92, 93, 93, 95, 96, 98, "]
[258.162609, "o", "\r\n"]
[258.162778, "o", "\r\n"]
[258.163607, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[259.873121, "o", "./rand_data_gen 50 | ./zad new_quick_sort"]
[262.330889, "o", "\b\u001b[K"]
[262.831331, "o", "\b\u001b[K"]
[262.861991, "o", "\b\u001b[K"]
[262.892382, "o", "\b\u001b[K"]
[262.923858, "o", "\b\u001b[K"]
[263.61126, "o", "\b\u001b[K"]
[263.803317, "o", "\b\u001b[K"]
[263.979208, "o", "\b\u001b[K"]
[264.171204, "o", "\b\u001b[K"]
[264.395092, "o", "\b\u001b[K"]
[265.37071, "o", "d"]
[265.611238, "o", "u"]
[265.963077, "o", "a"]
[266.29932, "o", "l"]
[266.955378, "o", "_"]
[267.403346, "o", "p"]
[267.627115, "o", "i"]
[269.1948, "o", "v"]
[269.371054, "o", "o"]
[269.675032, "o", "t"]
[270.542223, "o", "\r\n"]
[270.542711, "o", "\r\n"]
[270.542961, "o", "Received size: 50"]
[270.543227, "o", "\r\n"]
[270.543432, "o", "\r\n"]
[270.543688, "o", "Received array:"]
[270.543896, "o", "\r\n"]
[270.54413, "o", "52, 41, 65, 47, 64, 58,  7, 65, 50, 52, 34, 96, 10, 41, 36, 37, 34, 69, 90, 28, 62, 13, 84, 41, 78,  1, 72, 93, 92, 60, 49, 42, 82, 75, 70, 12, 36, 58, 95, 79, 26, 35, 94, 21, 34, 94, 39,  4, 55, 27, "]
[270.544339, "o", "\r\n"]
[270.544505, "o", "\r\n"]
[270.544728, "o", "Array before new dual pivot quicksort: "]
[270.54491, "o", "\r\n"]
[270.545128, "o", "52, 41, 65, 47, 64, 58,  7, 65, 50, 52, 34, 96, 10, 41, 36, 37, 34, 69, 90, 28, 62, 13, 84, 41, 78,  1, 72, 93, 92, 60, 49, 42, 82, 75, 70, 12, 36, 58, 95, 79, 26, 35, 94, 21, 34, 94, 39,  4, 55, 27, "]
[270.545312, "o", "\r\n"]
[270.545487, "o", "\r\n"]
[270.545722, "o", "\r\n"]
[270.545902, "o", "Aray after new dual pivot quick sort:"]
[270.546078, "o", "\r\n"]
[270.546289, "o", " 1,  4,  7, 10, 12, 13, 21, 26, 27, 28, 34, 34, 34, 35, 36, 36, 37, 39, 41, 41, 41, 42, 47, 49, 50, 52, 52, 55, 58, 58, 60, 62, 64, 65, 65, 69, 70, 72, 75, 78, 79, 82, 84, 90, 92, 93, 94, 94, 95, 96, "]
[270.546462, "o", "\r\n"]
[270.546642, "o", "\r\n"]
[270.54726, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[273.536648, "o", "./rand_data_gen 50 | ./zad new_dual_pivot"]
[274.749559, "o", "\r\n"]
[274.750932, "o", "\r\n"]
[274.751244, "o", "Received size: 50"]
[274.751437, "o", "\r\n"]
[274.7516, "o", "\r\n"]
[274.751784, "o", "Received array:"]
[274.752116, "o", "\r\n"]
[274.75243, "o", " 3, 95,  9, 49,  9, 23,  8, 42, 32, 76, 96,  8,  9,  0, 91, 59, 27, 61, 99,  6, 10, 94, 28, 56, 78, 80, 11, 68, 38, 45, 95, 86,  6, 78, 28, 87, 43, 46, 31, 16, 48, 64, 26, 19, 67, 46, 16, 45, 76, 49, "]
[274.752716, "o", "\r\n"]
[274.753106, "o", "\r\n"]
[274.753317, "o", "Array before new dual pivot quicksort: "]
[274.753619, "o", "\r\n"]
[274.754051, "o", " 3, 95,  9, 49,  9, 23,  8, 42, 32, 76, 96,  8,  9,  0, 91, 59, 27, 61, 99,  6, 10, 94, 28, 56, 78, 80, 11, 68, 38, 45, 95, 86,  6, 78, 28, 87, 43, 46, 31, 16, 48, 64, 26, 19, 67, 46, 16, 45, 76, 49, "]
[274.754296, "o", "\r\n"]
[274.754519, "o", "\r\n"]
[274.754755, "o", "\r\n"]
[274.754982, "o", "Aray after new dual pivot quick sort:"]
[274.755322, "o", "\r\n"]
[274.755575, "o", " 0,  3,  6,  6,  8,  8,  9,  9,  9, 10, 11, 16, 16, 19, 23, 26, 27, 28, 28, 31, 32, 38, 42, 43, 45, 45, 46, 46, 48, 49, 49, 56, 59, 61, 64, 67, 68, 76, 76, 78, 78, 80, 86, 87, 91, 94, 95, 95, 96, 99, "]
[274.756031, "o", "\r\n"]
[274.756321, "o", "\r\n"]
[274.757399, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[278.41177, "o", "#"]
[279.196009, "o", " "]
[279.676138, "o", "k"]
[279.755759, "o", "o"]
[280.556036, "o", "n"]
[280.61902, "o", "i"]
[280.892023, "o", "e"]
[281.339909, "o", "c"]
[282.107853, "o", " "]
[282.380108, "o", "p"]
[282.731543, "o", "r"]
[282.876062, "o", "e"]
[283.644314, "o", "z"]
[283.899953, "o", "e"]
[284.396042, "o", "n"]
[284.603763, "o", "t"]
[285.308132, "o", "a"]
[285.627745, "o", "c"]
[285.884115, "o", "j"]
[285.915823, "o", "i"]
[286.732311, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[288.36376, "o", "#"]
[288.828052, "o", " "]
[289.356148, "o", "d"]
[289.531831, "o", "i"]
[289.643817, "o", "a"]
[290.65195, "o", "g"]
[290.87615, "o", "r"]
[291.148247, "o", "a"]
[291.483974, "o", "m"]
[291.755898, "o", "y"]
[292.188027, "o", " "]
[293.148485, "o", "d"]
[293.308053, "o", "l"]
[293.483887, "o", "a"]
[293.660456, "o", " "]
[295.900522, "o", "\b\u001b[K"]
[296.402313, "o", "\b\u001b[K"]
[296.433313, "o", "\b\u001b[K"]
[296.463849, "o", "\b\u001b[K"]
[296.494564, "o", "\b\u001b[K"]
[296.52458, "o", "\b\u001b[K"]
[297.660616, "o", "y"]
[297.821033, "o", " "]
[298.10819, "o", "i"]
[298.236634, "o", " "]
[298.492567, "o", "w"]
[298.668724, "o", "y"]
[299.116721, "o", "k"]
[299.340713, "o", "r"]
[299.452424, "o", "e"]
[300.380979, "o", "s"]
[300.508683, "o", "t"]
[301.533137, "o", "\b\u001b[K"]
[301.661126, "o", "y"]
[301.916812, "o", " "]
[302.669545, "o", "d"]
[302.892255, "o", "l"]
[303.244875, "o", "a"]
[303.709246, "o", " "]
[304.141224, "o", "p"]
[304.301074, "o", "o"]
[304.588597, "o", "z"]
[304.780305, "o", "o"]
[305.468679, "o", "s"]
[305.836794, "o", "r"]
[306.412945, "o", "\b\u001b[K"]
[306.63668, "o", "t"]
[307.149158, "o", "a"]
[307.708585, "o", "ł"]
[308.108923, "o", "y"]
[308.428988, "o", "c"]
[308.589118, "o", "h"]
[308.749277, "o", " "]
[309.453147, "o", "z"]
[309.565335, "o", "a"]
[310.157178, "o", "d"]
[310.893291, "o", "a"]
[311.38896, "o", "ń"]
[311.772796, "o", " "]
[312.173326, "o", "s"]
[312.541151, "o", "ą"]
[312.89316, "o", " "]
[313.533617, "o", "w"]
[313.773296, "o", " "]
[314.397159, "o", "f"]
[314.717376, "o", "o"]
[315.19731, "o", "l"]
[315.469676, "o", "d"]
[315.597086, "o", "e"]
[316.429465, "o", "r"]
[316.621264, "o", "z"]
[316.765424, "o", "e"]
[324.269475, "o", " "]
[324.861869, "o", "w"]
[325.117791, "o", "y"]
[325.805815, "o", "k"]
[325.918996, "o", "r"]
[326.045446, "o", "e"]
[327.13353, "o", "s"]
[327.485496, "o", "y"]
[328.190818, "o", "\r\n"]
[328.190915, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/AiSD/lab03/zadania\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/AiSD/lab03/zadania\u001b[00m$ "]
[330.781603, "o", "e"]
[331.19764, "o", "x"]
[331.373722, "o", "i"]
[331.69351, "o", "t"]
[332.542831, "o", "\r\nexit\r\n"]
