{"version": 2, "width": 100, "height": 27, "timestamp": 1647276544, "idle_time_limit": 0.2, "env": {"SHELL": "/bin/bash", "TERM": "xterm-256color"}}
[0.041352, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705\u001b[00m$ "]
[1.983463, "o", "#"]
[3.00529, "o", " "]
[3.733748, "o", "S"]
[4.564508, "o", "t"]
[4.754901, "o", "u"]
[5.130605, "o", "d"]
[5.222829, "o", "e"]
[5.43625, "o", "n"]
[5.627603, "o", "t"]
[7.118724, "o", ":"]
[7.755756, "o", " "]
[8.031062, "o", "M"]
[8.252954, "o", "a"]
[8.557268, "o", "u"]
[8.941406, "o", "r"]
[9.082445, "o", "y"]
[9.820362, "o", "c"]
[9.963733, "o", "y"]
[10.510144, "o", " "]
[10.852024, "o", "S"]
[11.543792, "o", "o"]
[11.75432, "o", "s"]
[12.018475, "o", "n"]
[12.158298, "o", "o"]
[12.420642, "o", "w"]
[12.716193, "o", "s"]
[12.847828, "o", "k"]
[13.012419, "o", "i"]
[14.212132, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705\u001b[00m$ "]
[15.417969, "o", "#"]
[16.228873, "o", " "]
[16.379767, "o", "n"]
[16.989179, "o", "r"]
[17.131799, "o", " "]
[17.301951, "o", "i"]
[17.575735, "o", "n"]
[17.957491, "o", "d"]
[18.081039, "o", "e"]
[18.413603, "o", "k"]
[18.648152, "o", "s"]
[18.93973, "o", "u"]
[19.364113, "o", " "]
[20.19552, "o", "\b\u001b[K"]
[20.961455, "o", ":"]
[21.236347, "o", " "]
[22.098156, "o", "2"]
[22.503079, "o", "6"]
[22.684078, "o", "1"]
[23.210148, "o", "7"]
[23.826494, "o", "0"]
[24.020118, "o", "5"]
[24.949788, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705\u001b[00m$ "]
[27.273537, "o", "l"]
[27.393778, "o", "s"]
[27.528399, "o", "\r\n"]
[27.529559, "o", "\u001b[0m\u001b[01;34mlab01\u001b[0m\r\n"]
[27.53024, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705\u001b[00m$ "]
[28.631026, "o", "c"]
[28.690506, "o", "d"]
[29.409228, "o", " "]
[30.14909, "o", "l"]
[30.254199, "o", "ab01/"]
[30.767795, "o", "\r\n"]
[30.76818, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01\u001b[00m$ "]
[32.813957, "o", "l"]
[32.953863, "o", "s"]
[33.565403, "o", "\r\n"]
[33.567295, "o", "\u001b[0m\u001b[01;34mascinema_video\u001b[0m  \u001b[01;34mzad1\u001b[0m  \u001b[01;34mzad2\u001b[0m  \u001b[01;34mzad3\u001b[0m\r\n"]
[33.567682, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01\u001b[00m$ "]
[34.901304, "o", "c"]
[34.961604, "o", "d"]
[35.804584, "o", " "]
[36.408969, "o", "z"]
[37.036049, "o", "a"]
[37.285158, "o", "d"]
[37.786448, "o", "1"]
[38.262314, "o", "\r\n"]
[38.262717, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[39.713117, "o", "l"]
[39.833538, "o", "s"]
[39.99416, "o", "\r\n"]
[39.995721, "o", "zad1_fifo.c  zad1_lifo.c\r\n"]
[39.996318, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[42.582217, "o", "#"]
[43.219098, "o", " "]
[43.59544, "o", "z"]
[43.685959, "o", "a"]
[43.886471, "o", "d"]
[44.798385, "o", "1"]
[46.339898, "o", " "]
[46.491674, "o", "-"]
[46.591467, "o", " "]
[47.668761, "o", "f"]
[47.819097, "o", "i"]
[47.929174, "o", "f"]
[48.154383, "o", "o"]
[49.498998, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[52.86507, "o", "c"]
[52.987061, "o", "a"]
[53.211359, "o", "t"]
[54.029698, "o", " "]
[54.24338, "o", "z"]
[54.335169, "o", "a"]
[54.556144, "o", "d"]
[55.227121, "o", "1"]
[55.588924, "o", "_"]
[56.218722, "o", "f"]
[56.700209, "o", "ifo.c "]
[57.937024, "o", "\r\n"]
[57.93757, "o", "#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\n// maximum limit of the fifo queue\r\n#define LIMIT 1000 \r\n\r\n// global variables\r\nint LIFO_QUEUE[LIMIT];\r\nint front;\r\nint rear; \r\n\r\n// functions\r\nvoid insert_element(int element); \r\nvoid remove_element();\r\n\r\nint main(void) {\r\n    printf(\"FIFO QUEUE\\n\");\r\n    // front and rear = -1 implies that queue is empty\r\n    front = -1;\r\n    rear = -1; \r\n\r\n    srand(time(NULL));   \r\n    int r;\r\n    // adding 100 random elements\r\n    for(int i = 0; i < 100; i++) {\r\n        r = rand() % 100;\r\n        insert_element(r);\r\n    }\r\n    printf(\"\\nFINISHED INSERTING ELEMENTS\\n\\n\");\r\n    \r\n    // \"removing\" elements\r\n    for(int i = 0; i < 100; i++) {\r\n        remove_element();\r\n    }\r\n    printf(\"\\nFINISHED REMOVING ELEMENTS\\n\\n\");\r\n\r\n    return 0;\r\n}\r\n\r\n\r\nvoid insert_element(int element) {\r\n    if (rear == -1) {\r\n        rear = 0;\r\n        front = 0;\r\n        LIFO_QUEUE[rear] = element;\r\n        printf(\"added element : %d\\n\", element);\r\n    }\r\n    else if (rear == LIMIT"]
[57.937943, "o", " - 1) {\r\n        printf(\"queue is full\\n\");\r\n        return;\r\n    }\r\n    else {\r\n        rear++;\r\n        LIFO_QUEUE[rear] = element;\r\n        printf(\"added element : %d\\n\", element);\r\n    }\r\n}\r\n\r\nvoid remove_element() {\r\n    if (front == - 1) {\r\n        printf(\"queue is empty \\n\");\r\n    }\r\n    else if (front == rear) {\r\n        printf(\"removed element : %d\\n\", LIFO_QUEUE[front]);\r\n        front = -1;\r\n        rear = -1;\r\n    }\r\n    else {\r\n        printf(\"removed element : %d\\n\", LIFO_QUEUE[front]);\r\n        front++;\r\n    }\r\n}\r\n"]
[57.938164, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[61.264058, "o", "g"]
[61.659825, "o", "c"]
[61.790333, "o", "c"]
[62.528174, "o", " "]
[62.742365, "o", "-"]
[63.519447, "o", "o"]
[66.092825, "o", " "]
[67.2018, "o", "f"]
[67.402686, "o", "i"]
[67.664742, "o", "f"]
[69.101365, "o", "o"]
[70.092973, "o", " "]
[70.327913, "o", "z"]
[70.417895, "o", "a"]
[71.033405, "o", "d"]
[71.807777, "o", "\u0007"]
[71.808179, "o", "1_"]
[73.930448, "o", "f"]
[74.246415, "o", "ifo.c "]
[75.628334, "o", "\r\n"]
[75.70763, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[77.052306, "o", "l"]
[77.203124, "o", "s"]
[77.48059, "o", "\r\n"]
[77.482111, "o", "\u001b[0m\u001b[01;32mfifo\u001b[0m  zad1_fifo.c  zad1_lifo.c\r\n"]
[77.482612, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[79.285972, "o", "."]
[79.436007, "o", "/"]
[80.672645, "o", "f"]
[80.817507, "o", "i"]
[81.188835, "o", "f"]
[81.312475, "o", "o"]
[82.631718, "o", "\r\n"]
[82.632535, "o", "FIFO QUEUE\r\nadded element : 71\r\nadded element : 89\r\nadded element : 86\r\nadded element : 57\r\nadded element : 23\r\nadded element : 38\r\nadded element : 91\r\nadded element : 40\r\nadded element : 72\r\nadded element : 89\r\n"]
[82.632897, "o", "added element : 35\r\nadded element : 35\r\nadded element : 86\r\nadded element : 46\r\nadded element : 14\r\nadded element : 94\r\nadded element : 86\r\nadded element : 81\r\nadded element : 77\r\nadded element : 51\r\nadded element : 58\r\nadded element : 23\r\nadded element : 45\r\nadded element : 53\r\nadded element : 37\r\nadded element : 7\r\nadded element : 78\r\nadded element : 69\r\nadded element : 76\r\nadded element : 37\r\nadded element : 67\r\nadded element : 0\r\nadded element : 78\r\nadded element : 53\r\nadded element : 57\r\nadded element : 53\r\nadded element : 91\r\nadded element : 48\r\nadded element : 94\r\nadded element : 15\r\nadded element : 89\r\nadded element : 29\r\nadded element : 50\r\nadded element : 27\r\nadded element : 27\r\nadded element : 16\r\nadded element : 22\r\nadded element : 66\r\nadded element : 50\r\nadded element : 99\r\nadded element : 17\r\nadded element : 8\r\nadded element : 22\r\nadded element : 62\r\nadded element : 13\r\nadded element : 12\r\nadded element : 22\r\nadded element : 44\r\nadded element : 33\r\nadded element : 50\r\nadded element : 33\r\nadded e"]
[82.633123, "o", "lement : 0\r\nadded element : 50\r\nadded element : 11\r\nadded element : 54\r\nadded element : 7\r\nadded element : 65\r\nadded element : 97\r\nadded element : 7\r\nadded element : 11\r\nadded element : 13\r\nadded element : 48\r\nadded element : 40\r\nadded element : 15\r\nadded element : 76\r\nadded element : 19\r\nadded element : 32\r\nadded element : 50\r\nadded element : 85\r\nadded element : 34\r\nadded element : 1\r\nadded element : 55\r\nadded element : 42\r\nadded element : 24\r\nadded element : 17\r\nadded element : 8\r\nadded element : 88\r\nadded element : 91\r\nadded element : 4\r\nadded element : 21\r\nadded element : 42\r\nadded element : 37\r\nadded element : 73\r\nadded element : 92\r\nadded element : 0\r\nadded element : 27\r\nadded element : 52\r\nadded element : 17\r\nadded element : 77\r\nadded element : 59\r\n\r\nFINISHED INSERTING ELEMENTS\r\n\r\nremoved element : 71\r\nremoved element : 89\r\nremoved element : 86\r\nremoved element : 57\r\nremoved element : 23\r\nremoved element : 38\r\nremoved element : 91\r\nremoved element : 40\r\nremoved element : 72\r\nremoved element : 89\r\nremov"]
[82.633276, "o", "ed element : 35\r\nremoved element : 35\r\nremoved element : 86\r\nremoved element : 46\r\nremoved element : 14\r\nremoved element : 94\r\nremoved element : 86\r\nremoved element : 81\r\nremoved element : 77\r\nremoved element : 51\r\nremoved element : 58\r\nremoved element : 23\r\nremoved element : 45\r\nremoved element : 53\r\nremoved element : 37\r\nremoved element : 7\r\nremoved element : 78\r\nremoved element : 69\r\nremoved element : 76\r\nremoved element : 37\r\nremoved element : 67\r\nremoved element : 0\r\nremoved element : 78\r\nremoved element : 53\r\nremoved element : 57\r\nremoved element : 53\r\nremoved element : 91\r\nremoved element : 48\r\nremoved element : 94\r\nremoved element : 15\r\nremoved element : 89\r\nremoved element : 29\r\nremoved element : 50\r\nremoved element : 27\r\nremoved element : 27\r\nremoved element : 16\r\nremoved element : 22\r\nremoved element : 66\r\nremoved element : 50\r\nremoved element : 99\r\nremoved element : 17\r\nremoved element : 8\r\nremoved element : 22\r\nremoved element : 62\r\nremoved element : 13\r\nremoved element : 12\r\nremoved element : 22"]
[82.633402, "o", "\r\nremoved element : 44\r\nremoved element : 33\r\nremoved element : 50\r\nremoved element : 33\r\nremoved element : 0\r\nremoved element : 50\r\nremoved element : 11\r\nremoved element : 54\r\nremoved element : 7\r\nremoved element : 65\r\nremoved element : 97\r\nremoved element : 7\r\nremoved element : 11\r\nremoved element : 13\r\nremoved element : 48\r\nremoved element : 40\r\nremoved element : 15\r\nremoved element : 76\r\nremoved element : 19\r\nremoved element : 32\r\nremoved element : 50\r\nremoved element : 85\r\nremoved element : 34\r\nremoved element : 1\r\nremoved element : 55\r\nremoved element : 42\r\nremoved element : 24\r\nremoved element : 17\r\nremoved element : 8\r\nremoved element : 88\r\nremoved element : 91\r\nremoved element : 4\r\nremoved element : 21\r\nremoved element : 42\r\nremoved element : 37\r\nremoved element : 73\r\nremoved element : 92\r\nremoved element : 0\r\nremoved element : 27\r\nremoved element : 52\r\nremoved element : 17\r\nremoved element : 77\r\nremoved element : 59\r\n\r\nFINISHED REMOVING ELEMENTS\r\n\r\n"]
[82.633621, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[86.080922, "o", "l"]
[86.201593, "o", "s"]
[86.518384, "o", "\r\n"]
[86.519951, "o", "\u001b[0m\u001b[01;32mfifo\u001b[0m  zad1_fifo.c  zad1_lifo.c\r\n"]
[86.520408, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[88.60648, "o", "#"]
[89.212306, "o", " "]
[89.3767, "o", "z"]
[89.447136, "o", "a"]
[89.660001, "o", "d"]
[90.925221, "o", "1"]
[91.561182, "o", " "]
[91.795501, "o", "-"]
[92.431672, "o", " "]
[93.21924, "o", "l"]
[93.422465, "o", "i"]
[93.86891, "o", "d"]
[94.109918, "o", "o"]
[95.061456, "o", "\b\u001b[K"]
[95.231922, "o", "\b\u001b[K"]
[96.13371, "o", "f"]
[96.318079, "o", "o"]
[97.811946, "o", "\r\n"]
[97.812299, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[101.156156, "o", "g"]
[101.592663, "o", "c"]
[101.782926, "o", "c"]
[102.157206, "o", " "]
[102.355111, "o", "-"]
[103.433163, "o", "o"]
[103.86916, "o", " "]
[104.707035, "o", "l"]
[104.90138, "o", "i"]
[105.273036, "o", "f"]
[105.446818, "o", "o"]
[105.853034, "o", " "]
[106.367693, "o", "z"]
[106.447925, "o", "a"]
[106.639947, "o", "d"]
[107.245401, "o", "1"]
[107.631005, "o", "_"]
[107.985126, "o", "l"]
[108.216103, "o", "ifo.c "]
[109.395103, "o", "\r\n"]
[109.472061, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[111.376956, "o", "l"]
[111.488064, "o", "s"]
[111.648531, "o", "\r\n"]
[111.650466, "o", "\u001b[0m\u001b[01;32mfifo\u001b[0m  \u001b[01;32mlifo\u001b[0m  zad1_fifo.c  zad1_lifo.c\r\n"]
[111.650811, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[113.381103, "o", "."]
[113.512326, "o", "/"]
[117.729193, "o", "\b\u001b[K"]
[117.924132, "o", "\b\u001b[K"]
[119.877807, "o", "c"]
[120.000959, "o", "a"]
[120.332109, "o", "t"]
[122.036083, "o", " "]
[122.36667, "o", "z"]
[122.420986, "o", "a"]
[122.663353, "o", "d"]
[123.98194, "o", "1"]
[126.050248, "o", "_"]
[126.888393, "o", "l"]
[127.027381, "o", "ifo.c "]
[127.800526, "o", "\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\n// maximum limit of the lifo queue\r\n#define LIMIT 1000 \r\n\r\n// global variables\r\nint LIFO_QUEUE[LIMIT];\r\nint top;\r\n\r\n// functions\r\nvoid insert_element(int element); \r\nvoid remove_element();\r\n\r\nint main(void) {\r\n    printf(\"LIFO QUEUE\\n\");\r\n    // front and rear = -1 implies that queue is empty\r\n    top = -1;\r\n\r\n    srand(time(NULL));   \r\n    int r;\r\n    // adding 100 random elements\r\n    for(int i = 0; i < 100; i++) {\r\n        r = rand() % 100;\r\n        insert_element(r);\r\n    }\r\n    printf(\"\\nFINISHED INSERTING ELEMENTS\\n\\n\");\r\n    \r\n    // \"removing\" elements\r\n    for(int i = 0; i < 100; i++) {\r\n        remove_element();\r\n    }\r\n    printf(\"\\nFINISHED REMOVING ELEMENTS\\n\\n\");\r\n\r\n    return 0;\r\n}\r\n\r\n\r\nvoid insert_element(int element) {\r\n    if (top == -1) {\r\n        top = 0;\r\n        LIFO_QUEUE[top] = element;\r\n        printf(\"added element : %d\\n\", element);\r\n    }\r\n    else if (top == LIMIT - 1) {\r\n        printf(\"queue is full\\n\");\r\n        re"]
[127.800913, "o", "turn;\r\n    }\r\n    else {\r\n        top++;\r\n        LIFO_QUEUE[top] = element;\r\n        printf(\"added element : %d\\n\", element);\r\n    }\r\n}\r\n\r\nvoid remove_element() {\r\n    if (top == -1) {\r\n        printf(\"queue is empty \\n\");\r\n    }\r\n    else {\r\n        printf(\"removed element : %d\\n\", LIFO_QUEUE[top]);\r\n        top--;\r\n    }\r\n}"]
[127.801405, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[129.809559, "o", "l"]
[129.943737, "o", "s"]
[130.134655, "o", "\r\n"]
[130.136125, "o", "\u001b[0m\u001b[01;32mfifo\u001b[0m  \u001b[01;32mlifo\u001b[0m  zad1_fifo.c  zad1_lifo.c\r\n"]
[130.136668, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[132.228637, "o", "."]
[132.368215, "o", "/"]
[133.952779, "o", "l"]
[134.18382, "o", "i"]
[134.954058, "o", "fo "]
[135.996127, "o", "\r\n"]
[135.996889, "o", "LIFO QUEUE\r\nadded element : 78\r\nadded element : 41\r\nadded element : 80\r\nadded element : 61\r\nadded element : 59\r\nadded element : 97\r\n"]
[135.99715, "o", "added element : 71\r\nadded element : 71\r\nadded element : 36\r\nadded element : 94\r\nadded element : 62\r\nadded element : 89\r\nadded element : 12\r\nadded element : 15\r\nadded element : 21\r\nadded element : 54\r\nadded element : 90\r\nadded element : 22\r\nadded element : 78\r\nadded element : 98\r\nadded element : 79\r\nadded element : 89\r\nadded element : 28\r\nadded element : 49\r\nadded element : 32\r\nadded element : 33\r\nadded element : 95\r\nadded element : 1\r\nadded element : 4\r\nadded element : 70\r\nadded element : 69\r\nadded element : 35\r\nadded element : 11\r\nadded element : 49\r\nadded element : 96\r\nadded element : 23\r\nadded element : 98\r\nadded element : 19\r\nadded element : 46\r\nadded element : 34\r\nadded element : 66\r\nadded element : 8\r\nadded element : 76\r\nadded element : 78\r\nadded element : 24\r\nadded element : 97\r\nadded element : 33\r\nadded element : 66\r\nadded element : 19\r\nadded element : 63\r\nadded element : 16\r\nadded element : 98\r\nadded element : 5\r\nadded element : 45\r\nadded element : 99\r\nadded element : 37\r\nadded element : 78\r\nadded el"]
[135.99729, "o", "ement : 94\r\nadded element : 38\r\nadded element : 34\r\nadded element : 17\r\nadded element : 60\r\nadded element : 21\r\nadded element : 28\r\nadded element : 61\r\nadded element : 17\r\nadded element : 3\r\nadded element : 60\r\nadded element : 89\r\nadded element : 49\r\nadded element : 94\r\nadded element : 7\r\nadded element : 58\r\nadded element : 70\r\nadded element : 85\r\nadded element : 34\r\nadded element : 19\r\nadded element : 70\r\nadded element : 0\r\nadded element : 90\r\nadded element : 86\r\nadded element : 16\r\nadded element : 88\r\nadded element : 91\r\nadded element : 13\r\nadded element : 40\r\nadded element : 80\r\nadded element : 43\r\nadded element : 86\r\nadded element : 71\r\nadded element : 78\r\nadded element : 3\r\nadded element : 31\r\nadded element : 99\r\nadded element : 84\r\nadded element : 92\r\nadded element : 69\r\nadded element : 87\r\nadded element : 4\r\nadded element : 10\r\n\r\nFINISHED INSERTING ELEMENTS\r\n\r\nremoved element : 10\r\nremoved element : 4\r\nremoved element : 87\r\nremoved element : 69\r\nremoved element : 92\r\nremoved element : 84\r\nremoved eleme"]
[135.997505, "o", "nt : 99\r\nremoved element : 31\r\nremoved element : 3\r\nremoved element : 78\r\nremoved element : 71\r\nremoved element : 86\r\nremoved element : 43\r\nremoved element : 80\r\nremoved element : 40\r\nremoved element : 13\r\nremoved element : 91\r\nremoved element : 88\r\nremoved element : 16\r\nremoved element : 86\r\nremoved element : 90\r\nremoved element : 0\r\nremoved element : 70\r\nremoved element : 19\r\nremoved element : 34\r\nremoved element : 85\r\nremoved element : 70\r\nremoved element : 58\r\nremoved element : 7\r\nremoved element : 94\r\nremoved element : 49\r\nremoved element : 89\r\nremoved element : 60\r\nremoved element : 3\r\nremoved element : 17\r\nremoved element : 61\r\nremoved element : 28\r\nremoved element : 21\r\nremoved element : 60\r\nremoved element : 17\r\nremoved element : 34\r\nremoved element : 38\r\nremoved element : 94\r\nremoved element : 78\r\nremoved element : 37\r\nremoved element : 99\r\nremoved element : 45\r\nremoved element : 5\r\nremoved element : 98\r\nremoved element : 16\r\nremoved element : 63\r\nremoved element : 19\r\nremoved element : 66\r\nremoved "]
[135.997568, "o", "element : 33\r\nremoved element : 97\r\nremoved element : 24\r\nremoved element : 78\r\nremoved element : 76\r\nremoved element : 8\r\nremoved element : 66\r\nremoved element : 34\r\nremoved element : 46\r\nremoved element : 19\r\nremoved element : 98\r\nremoved element : 23\r\nremoved element : 96\r\nremoved element : 49\r\nremoved element : 11\r\nremoved element : 35\r\nremoved element : 69\r\nremoved element : 70\r\nremoved element : 4\r\nremoved element : 1\r\nremoved element : 95\r\nremoved element : 33\r\nremoved element : 32\r\nremoved element : 49\r\nremoved element : 28\r\nremoved element : 89\r\nremoved element : 79\r\nremoved element : 98\r\nremoved element : 78\r\nremoved element : 22\r\nremoved element : 90\r\nremoved element : 54\r\nremoved element : 21\r\nremoved element : 15\r\nremoved element : 12\r\nremoved element : 89\r\nremoved element : 62\r\nremoved element : 94\r\nremoved element : 36\r\nremoved element : 71\r\nremoved element : 71\r\nremoved element : 97\r\nremoved element : 59\r\nremoved element : 61\r\nremoved element : 80\r\nremoved element : 41\r\nremoved element : 78\r\n\r"]
[135.997622, "o", "\nFINISHED REMOVING ELEMENTS\r\n\r\n"]
[135.997889, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad1\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad1\u001b[00m$ "]
[140.937717, "o", "c"]
[141.030392, "o", "d"]
[141.665709, "o", " "]
[142.103503, "o", "."]
[142.253185, "o", "."]
[142.963315, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01\u001b[00m$ "]
[145.598685, "o", "c"]
[145.689457, "o", "d"]
[146.185367, "o", " "]
[146.375623, "o", "z"]
[146.445924, "o", "a"]
[146.967674, "o", "\u0007"]
[146.968135, "o", "d"]
[147.973712, "o", "2"]
[148.704368, "o", "\r\n"]
[148.704674, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad2\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad2\u001b[00m$ "]
[149.727594, "o", "l"]
[149.858286, "o", "s"]
[150.423074, "o", "\r\n"]
[150.424637, "o", "zad2.c\r\n"]
[150.425002, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad2\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad2\u001b[00m$ "]
[153.732619, "o", "#"]
[154.288618, "o", " "]
[154.522302, "o", "z"]
[154.582352, "o", "a"]
[154.86524, "o", "d"]
[155.916794, "o", "2"]
[156.948621, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad2\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad2\u001b[00m$ "]
[157.949173, "o", "c"]
[158.072782, "o", "a"]
[158.29267, "o", "t"]
[159.304893, "o", " "]
[160.066348, "o", "z"]
[160.136274, "o", "a"]
[160.338179, "o", "d"]
[161.046298, "o", "2"]
[162.483437, "o", "."]
[162.56636, "o", "c"]
[163.455661, "o", "\r\n"]
[163.456897, "o", "#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\ntypedef struct Node {\r\n    int data;\r\n    struct Node *next;\r\n} Node;\r\n\r\n// functions to insert element\r\nvoid insert_back(Node **head, int data);\r\nvoid insert_front(Node **head, int data);\r\n// functions to remove element\r\nvoid remove_back(Node **head);\r\nvoid remove_front(Node **head);\r\nvoid remove_by_data(Node **head, int data);\r\nvoid remove_by_index(Node **head, int index);\r\n// funtions to find/display element\r\nvoid display(Node *head);\r\nNode* get_by_data(Node **head, int data);\r\nNode* get_by_index(Node **head, int index);\r\n// merge lists\r\nNode* merge_lists(Node **head_1, Node **head_2);\r\n// calculates list size\r\nint list_size(Node *head);\r\n// exercises\r\nvoid measure_element_acces_time();\r\nvoid test_merge_function();\r\n\r\n\r\nint main(void) {\r\n    srand(time(NULL));   \r\n\r\n    test_merge_function();\r\n    measure_element_acces_time();\r\n\r\n    return 0;\r\n}\r\n\r\n\r\nvoid measure_element_acces_time() {\r\n    Node *head = NULL;\r\n    int values[1000];\r\n    clock_t"]
[163.457252, "o", " t;\r\n\r\n    int r;\r\n    for (int i = 0; i < 1000; i++) {\r\n        r = rand() % 1000;\r\n        values[i] = r;\r\n    }\r\n\r\n    for (int i = 0; i < 1000; i++) {\r\n        insert_front(&head, values[i]);\r\n    }\r\n    \r\n    // accesing 150th element\r\n    t = clock();\r\n    int counter = 0;\r\n    while (counter < 1000000) {\r\n        get_by_index(&head, 150);\r\n        counter ++;\r\n    }\r\n    t = clock() - t;\r\n    double average_time = (((double)t)/CLOCKS_PER_SEC)/counter;\r\n    printf(\"Average time to acces 150th element is :  %.8f seconds\\n\", average_time);\r\n\r\n    // accesing 450th element\r\n    t = clock();\r\n    counter = 0;\r\n    while (counter < 1000000) {\r\n        get_by_index(&head, 450);\r\n        counter ++;\r\n    }\r\n    t = clock() - t;\r\n    average_time = (((double)t)/CLOCKS_PER_SEC)/counter;\r\n    printf(\"Average time to acces 450th element is :  %.8f seconds\\n\", average_time);\r\n\r\n    // accesing 950th element\r\n    t = clock();\r\n    counter = 0;\r\n    while (counter < 1000000) {\r\n        get_by_index(&head, 950);\r\n    "]
[163.457589, "o", "    counter ++;\r\n    }\r\n    t = clock() - t;\r\n    average_time = (((double)t)/CLOCKS_PER_SEC)/counter;\r\n    printf(\"Average time to acces 950th element is :  %.8f seconds\\n\", average_time);\r\n\r\n    // average time accesing random element\r\n    t = clock();\r\n    counter = 0;\r\n    while (counter < 1000000) {\r\n        r = rand() % 1000;\r\n        get_by_data(&head, values[r]);\r\n        counter ++;\r\n    }\r\n    t = clock() - t;\r\n    average_time = (((double)t)/CLOCKS_PER_SEC)/counter;\r\n    printf(\"Average time to acces random element is : %.8f seconds\\n\", average_time);\r\n}\r\n\r\nvoid test_merge_function() {\r\n    Node *head_1 = NULL;\r\n    Node *head_2 = NULL;\r\n    \r\n    // adding random elements\r\n    int r;\r\n    for(int i = 0; i < 10; i++) {\r\n        r = rand() % 100;\r\n        insert_front(&head_1, r);\r\n        \r\n        r = rand() % 100;\r\n        insert_front(&head_2, r);\r\n    }\r\n    printf(\"\\n\\nBEFORE MERGE :\\n\");\r\n    printf(\"LIST 1 :\\n\");\r\n    display(head_1);\r\n    printf(\"\\n\");\r\n    printf(\"LIST 2 :\\n\");\r\n    displa"]
[163.457869, "o", "y(head_2);\r\n    printf(\"\\n\");\r\n    printf(\"AFTER MERGE(LIST 1, LIST 2) :\\n\");\r\n    display(merge_lists(&head_1, &head_2));\r\n    printf(\"\\n\\n\");\r\n}\r\n\r\nvoid insert_back(Node **head, int number) {\r\n\tif(*head == NULL) {\r\n\t\t*head = (Node *)malloc(sizeof(Node));\r\n   \t\t(*head)->data = number;\r\n    \t(*head)->next = NULL;\r\n\t}\r\n    else {\r\n\t\tNode *current = *head;\r\n\t\r\n\t    while (current->next != NULL) {\r\n\t        current = current->next;\r\n\t    }\r\n\t\r\n\t    current->next = (Node *)malloc(sizeof(Node));\r\n\t    current->next->data = number;\r\n\t    current->next->next = NULL;\t\r\n\t}\r\n}\r\n\r\nvoid insert_front(Node **head, int data) {\r\n    Node *current = (Node *)malloc(sizeof(Node));\r\n \r\n    current->data = data;\r\n    current->next = (*head);\r\n    *head = current;\r\n}\r\n \r\nvoid remove_back(Node **head) {\r\n\tif((*head)->next == NULL) {\t\r\n\t\t*head = NULL;\t\r\n\t} \r\n    else {\r\n\t\tNode *current = *head;\r\n\t\twhile (current->next->next!= NULL) {\r\n            current = current->next;\r\n    \t}\r\n   \t\tfree(current->next);\r\n   \t\tcurrent->next = NULL;"]
[163.458195, "o", "\r\n\t}   \r\n}\r\n\r\nvoid remove_front(Node **head) {\r\n    Node * tmp = NULL;\r\n \r\n    if (*head != NULL) {\r\n        tmp = (*head)->next;\r\n        free(*head);\r\n        *head = tmp;\t\r\n\t}   \r\n}\r\n \r\nvoid remove_by_data(Node **head, int data) {\r\n    Node* tmp = *head;\r\n    Node* previous; \r\n   \r\n    if ((*head)->data == data) { \t\t\t\t  \r\n        remove_front(head);\r\n        return;\r\n    } \r\n  \r\n    while (tmp != NULL && tmp->data != data) { \r\n        previous = tmp; \r\n        tmp = tmp->next; \r\n    } \r\n   \r\n    if (tmp == NULL){\r\n    \tprintf(\"element with such data doesn't exist\\n\");\r\n    \treturn;\r\n    } \r\n  \r\n    previous->next = tmp->next; \r\n    free(tmp);\r\n}\r\n \r\nvoid remove_by_index(Node **head, int position) {\r\n\tif(position == 0) {\r\n        remove_front(head);\r\n    }\r\n    else {\r\n\t\tNode *current = *head;\r\n\t    Node *tmp;\r\n\t\t\r\n\t\tint i = 0;\r\n\t\twhile (current->next != NULL && i < position - 1) {\r\n\t        current = current->next;\r\n\t\t\ti++;    \r\n\t\t}\r\n\t\t\t\r\n\t\ttmp = current->next;\r\n\t    current->next = tmp->next;\r\n\t    free(t"]
[163.458489, "o", "mp);\t\r\n\t}\r\n}\r\n\r\nvoid display(Node *head) {\r\n    if (head == NULL) {\r\n        printf(\"List is empty\");\r\n        return;\r\n    }\r\n    \r\n    Node *current = head;\r\n    while (current != NULL) {\r\n        printf(\"%d, \", current->data);\r\n        current = current->next;\r\n    }\r\n    printf(\"\\n\");\r\n}\r\n\r\nNode* get_by_data(Node **head, int data) {\r\n    Node *tmp = *head;\r\n\r\n    int position = 0;\r\n    while (tmp != NULL && tmp->data != data) {\r\n        tmp = tmp->next;\r\n        position++;\r\n    }\r\n\r\n    if (tmp == NULL) {\r\n        printf(\"element with such data doesn't exist\\n\");\r\n        return NULL;\r\n    }\r\n    else {\r\n        //printf(\"element with value:%d (%d), has index:%d\", data, tmp->data, position);\r\n        return tmp;\r\n    }\r\n}\r\n\r\nNode* get_by_index(Node **head, int index) {\r\n    Node *tmp = *head;\r\n\r\n    int position = 0;\r\n    while (tmp != NULL && position < index) {\r\n        tmp = tmp->next;\r\n        position++;\r\n    }\r\n\r\n    if (tmp == NULL) {\r\n        printf(\"given index is out of bounds\\n\");\r\n        ret"]
[163.458775, "o", "urn NULL;\r\n    }\r\n    else {\r\n        //printf(\"element with value:%d, has index:%d\", tmp->data, position);\r\n        return tmp;\r\n    } \r\n}\r\n\r\nNode* merge_lists(Node **head_1, Node **head_2) {\r\n    if (*head_1 == NULL && *head_2 == NULL) {\r\n        return NULL;\r\n    }\r\n    if (*head_1 == NULL) {\r\n        return *head_2;\r\n    }\r\n    if (*head_2 == NULL) {\r\n        return *head_1;\r\n    }\r\n\r\n    Node *tmp = *head_1;\r\n    while (tmp->next != NULL) {\r\n        tmp = tmp->next;\r\n    }\r\n    tmp->next = *head_2;\r\n\r\n    return *head_1;\r\n}\r\n\r\nint list_size(Node *head) {\r\n    Node *current = head;\r\n    \r\n    int counter = 0;\r\n    while (current != NULL) {\r\n        current = current->next;\r\n        counter ++;\r\n    }\r\n    return counter; \r\n}\r\n\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad2\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad2\u001b[00m$ "]
[170.044168, "o", "g"]
[170.499416, "o", "c"]
[170.663849, "o", "c"]
[171.290282, "o", " "]
[172.121543, "o", "-"]
[172.412139, "o", "o"]
[173.33379, "o", " "]
[173.514212, "o", "z"]
[173.608132, "o", "a"]
[173.829238, "o", "d"]
[174.556072, "o", "2"]
[175.457622, "o", " "]
[175.601135, "o", "z"]
[175.725732, "o", "a"]
[175.924234, "o", "d"]
[177.083777, "o", "2"]
[177.559683, "o", "."]
[177.773741, "o", "c"]
[178.311348, "o", "\r\n"]
[178.419814, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad2\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad2\u001b[00m$ "]
[180.077801, "o", "l"]
[180.21146, "o", "s"]
[180.401841, "o", "\r\n"]
[180.403912, "o", "\u001b[0m\u001b[01;32mzad2\u001b[0m  zad2.c\r\n"]
[180.404305, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad2\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad2\u001b[00m$ "]
[182.035229, "o", "."]
[182.128302, "o", "/"]
[183.471263, "o", "z"]
[183.560943, "o", "a"]
[183.986649, "o", "d"]
[184.848866, "o", "2"]
[187.537792, "o", "\r\u001b[K\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad2\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad2\u001b[00m$ ./zad2"]
[187.644911, "o", "\r\u001b[K\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad2\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad2\u001b[00m$ ./zad2"]
[189.257428, "o", "\r\n\r\n\r\nBEFORE MERGE :\r\nLIST 1 :\r\n46, 38, 53, 37, 9, 29, 76, 18, 29, 31, \r\n\r\nLIST 2 :\r\n50, 68, 44, 4, 99, 94, 11, 81, 68, 71, \r\n\r\nAFTER MERGE(LIST 1, LIST 2) :\r\n46, 38, 53, 37, 9, 29, 76, 18, 29, 31, 50, 68, 44, 4, 99, 94, 11, 81, 68, 71, \r\n\r\n\r\n"]
[189.768526, "o", "Average time to acces 150th element is :  0.00000050 seconds\r\n"]
[191.19861, "o", "Average time to acces 450th element is :  0.00000143 seconds\r\n"]
[194.352474, "o", "Average time to acces 950th element is :  0.00000315 seconds\r\n"]
[195.692793, "o", "Average time to acces random element is : 0.00000134 seconds\r\n"]
[195.693236, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad2\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad2\u001b[00m$ "]
[202.436649, "o", "l"]
[202.558514, "o", "s"]
[203.16527, "o", "\r\n"]
[203.167172, "o", "\u001b[0m\u001b[01;32mzad2\u001b[0m  zad2.c\r\n"]
[203.167691, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad2\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad2\u001b[00m$ "]
[207.254816, "o", "c"]
[207.354918, "o", "d"]
[208.181676, "o", " "]
[209.744117, "o", "."]
[209.904497, "o", "."]
[210.269366, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01\u001b[00m$ "]
[212.305437, "o", "c"]
[212.415625, "o", "d"]
[213.22251, "o", " "]
[213.375535, "o", "z"]
[213.396036, "o", "a"]
[213.646907, "o", "d"]
[214.517133, "o", "3"]
[215.15283, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad3\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad3\u001b[00m$ "]
[216.544226, "o", "l"]
[216.665023, "o", "s"]
[217.202393, "o", "\r\nzad3.c\r\n"]
[217.202764, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad3\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad3\u001b[00m$ "]
[219.147056, "o", "#"]
[219.774439, "o", " "]
[219.98529, "o", "z"]
[220.045958, "o", "a"]
[220.261323, "o", "d"]
[220.825824, "o", "3"]
[221.662438, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad3\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad3\u001b[00m$ "]
[223.479519, "o", "c"]
[223.5705, "o", "a"]
[223.751518, "o", "t"]
[224.766256, "o", " "]
[225.237968, "o", "z"]
[225.300576, "o", "a"]
[226.08751, "o", "d"]
[226.856783, "o", "3"]
[227.391857, "o", "."]
[227.531636, "o", "c"]
[230.780693, "o", "\r\n"]
[230.782279, "o", "#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\ntypedef struct Node {\r\n    int data;\r\n    struct Node *previous;\r\n    struct Node *next;\r\n} Node;\r\n\r\n// functions to insert element\r\nvoid insert_as_entry(Node **entry_point, int data);\r\nvoid insert_before_entry(Node **entry_point, int data);\r\nvoid insert_after_entry(Node **entry_point, int data);\r\n// functions to remove element\r\nvoid remove_from_entry(Node **entry_point);\r\nvoid remove_before_entry(Node **entry_point);\r\nvoid remove_after_entry(Node **entry_point);\r\nvoid remove_by_data(Node **entry_point, int data);\r\n// funtions to find/display element\r\nvoid display_from_entry(Node *entry_point);\r\nNode* get_element(Node **entry_point, int data);\r\n// calculates list size\r\nint list_size(Node *entry_point);\r\n// merge lists\r\nNode* merge_lists(Node **entry_point_1, Node **entry_point_2);\r\n// exercises\r\nvoid measure_element_acces_time();\r\nvoid test_merge_function();\r\n\r\n\r\nint main(void) {\r\n    srand(time(NULL));\r\n\r\n    test_merge_function();\r\n    measure_el"]
[230.782645, "o", "ement_acces_time();\r\n\r\n    return 0;\r\n}\r\n\r\nvoid measure_element_acces_time() {\r\n    Node *entry_point = NULL;\r\n    int values[1000];\r\n    clock_t t;\r\n\r\n    int r;\r\n    for (int i = 0; i < 1000; i++) {\r\n        r = rand() % 1000;\r\n        values[i] = r;\r\n    }\r\n\r\n    for (int i = 0; i < 1000; i++) {\r\n        insert_as_entry(&entry_point, values[i]);\r\n    }\r\n    \r\n    // accesing 150th element\r\n    t = clock();\r\n    int counter = 0;\r\n    while (counter < 1000000) {\r\n        get_element(&entry_point, values[850]);\r\n        counter ++;\r\n    }\r\n    t = clock() - t;\r\n    double average_time = (((double)t)/CLOCKS_PER_SEC)/counter;\r\n    printf(\"Average time to acces 150th element is :  %.8f seconds\\n\", average_time);\r\n\r\n    // accesing 450th element\r\n    t = clock();\r\n    counter = 0;\r\n    while (counter < 1000000) {\r\n        get_element(&entry_point, values[550]);\r\n        counter ++;\r\n    }\r\n    t = clock() - t;\r\n    average_time = (((double)t)/CLOCKS_PER_SEC)/counter;\r\n    printf(\"Average time to acces 450th eleme"]
[230.782891, "o", "nt is :  %.8f seconds\\n\", average_time);\r\n\r\n    // accesing 950th element\r\n    t = clock();\r\n    counter = 0;\r\n    while (counter < 1000000) {\r\n        get_element(&entry_point, values[100]);\r\n        counter ++;\r\n    }\r\n    t = clock() - t;\r\n    average_time = (((double)t)/CLOCKS_PER_SEC)/counter;\r\n    printf(\"Average time to acces 950th element is :  %.8f seconds\\n\", average_time);\r\n\r\n    // average time accesing random element\r\n    t = clock();\r\n    counter = 0;\r\n    while (counter < 1000000) {\r\n        r = rand() % 1000;\r\n        get_element(&entry_point, values[r]);\r\n        counter ++;\r\n    }\r\n    t = clock() - t;\r\n    average_time = (((double)t)/CLOCKS_PER_SEC)/counter;\r\n    printf(\"Average time to acces random element is : %.8f seconds\\n\", average_time);\r\n}\r\n\r\nvoid test_merge_function() {\r\n    Node *entry_point_1 = NULL;\r\n    Node *entry_point_2 = NULL;\r\n    \r\n    // adding random elements\r\n    int r;\r\n    for(int i = 0; i < 10; i++) {\r\n        r = rand() % 100;\r\n        insert_as_entry(&entry_point_1"]
[230.78306, "o", ", r);\r\n        \r\n        r = rand() % 100;\r\n        insert_as_entry(&entry_point_2, r);\r\n    }\r\n    printf(\"\\n\\nBEFORE MERGE :\\n\");\r\n    printf(\"LIST 1 :\\n\");\r\n    display_from_entry(entry_point_1);\r\n    printf(\"\\n\");\r\n    printf(\"LIST 2 :\\n\");\r\n    display_from_entry(entry_point_2);\r\n    printf(\"\\n\");\r\n    printf(\"AFTER MERGE(LIST 1, LIST 2) :\\n\");\r\n    display_from_entry(merge_lists(&entry_point_1, &entry_point_2));\r\n    printf(\"\\n\\n\");\r\n}\r\n\r\nvoid insert_as_entry(Node **entry_point, int data) {\r\n    if (*entry_point == NULL) {\r\n        *entry_point = (Node *)malloc(sizeof(Node));\r\n        (*entry_point)->data = data;\r\n        (*entry_point)->previous = *entry_point;\r\n        (*entry_point)->next = *entry_point;\r\n        return;\r\n    } \r\n    else {\r\n        Node *current = (Node *)malloc(sizeof(Node));\r\n        current->next = *entry_point;\r\n        current->previous = (*entry_point)->previous;\r\n        current->data = data;\r\n        (*entry_point)->previous->next = current;\r\n        (*entry_point)->previou"]
[230.783283, "o", "s = current;\r\n        *entry_point = current;\r\n        return;\r\n    }\r\n}\r\n\r\nvoid insert_before_entry(Node **entry_point, int data) {\r\n    if (*entry_point == NULL) {\r\n        *entry_point = (Node *)malloc(sizeof(Node));\r\n        (*entry_point)->data = data;\r\n        (*entry_point)->previous = *entry_point;\r\n        (*entry_point)->next = *entry_point;\r\n        return;\r\n    } \r\n    else {\r\n        Node *tmp = (*entry_point)->previous;\r\n        Node *current = (Node *)malloc(sizeof(Node));\r\n        current->previous = tmp;\r\n        current->next = (*entry_point);\r\n        current->data = data;\r\n        (*entry_point)->previous = current;\r\n        tmp->next = current;\r\n        \r\n        return;\r\n    }\r\n}\r\n\r\nvoid insert_after_entry(Node **entry_point, int data) {\r\n    if (*entry_point == NULL) {\r\n        *entry_point = (Node *)malloc(sizeof(Node));\r\n        (*entry_point)->data = data;\r\n        (*entry_point)->previous = *entry_point;\r\n        (*entry_point)->next = *entry_point;\r\n        return;\r\n    } \r\n    els"]
[230.783481, "o", "e {\r\n        Node *current = (Node *)malloc(sizeof(Node));\r\n        Node *tmp = (*entry_point)->next;\r\n        (*entry_point)->next = current;\r\n        tmp->previous = current;\r\n        current->next = tmp;\r\n        current->previous = (*entry_point);\r\n        current->data = data;\r\n        return;\r\n    }\r\n}\r\n\r\nvoid remove_from_entry(Node **entry_point) {\r\n    if (*entry_point == NULL) {\r\n        printf(\"list is empty\");\r\n        return;\r\n    }\r\n    else if ((*entry_point)->next == NULL) {\r\n        *entry_point = NULL;\r\n        return;\r\n    }\r\n    else {\r\n        Node *tmp = (*entry_point)->next;\r\n        tmp->previous = (*entry_point)->previous;\r\n        free(*entry_point);\r\n        *entry_point = tmp;\r\n        return;\r\n    }\r\n}\r\n\r\nvoid remove_before_entry(Node **entry_point) {\r\n    if (*entry_point == NULL) {\r\n        printf(\"list is empty\");\r\n        return;\r\n    }\r\n    else if ((*entry_point)->next == NULL) {\r\n        *entry_point = NULL;\r\n        return;\r\n    }\r\n    else {\r\n        Node *tmp = (*entry_po"]
[230.783649, "o", "int)->next->next;\r\n        free((*entry_point)->next);\r\n        (*entry_point)->next = tmp;\r\n        tmp->previous = *entry_point;\r\n    }\r\n}\r\n\r\nvoid remove_after_entry(Node **entry_point) {\r\n    if (*entry_point == NULL) {\r\n        printf(\"list is empty\");\r\n        return;\r\n    }\r\n    else if ((*entry_point)->next == NULL) {\r\n        free(*entry_point);\r\n        *entry_point = NULL;\r\n        return;\r\n    }\r\n    else {\r\n        Node *tmp = (*entry_point)->previous->previous;\r\n        free((*entry_point)->previous);\r\n        (*entry_point)->previous = tmp;\r\n        tmp->next = *entry_point;\r\n    }\r\n}\r\n\r\nvoid remove_by_data(Node **entry_point, int data) {\r\n    if ((*entry_point)->data == data) {\r\n        remove_from_entry(entry_point);\r\n        return;\r\n    }\r\n    if ((*entry_point)->next->data == data) {\r\n        remove_after_entry(entry_point);\r\n        return;\r\n    }\r\n    if ((*entry_point)->previous->data == data) {\r\n        remove_before_entry(entry_point);\r\n        return;\r\n    }\r\n\r\n    Node* tmp = *entry_"]
[230.783787, "o", "point;\r\n    while (tmp->data != data && tmp->next != *entry_point ) {\r\n        tmp = tmp->next;\r\n    }\r\n\r\n    if (tmp == (*entry_point)->previous) {\r\n        printf(\"cant find and remove element with given data\\n\");\r\n        return;\r\n    }\r\n\r\n    tmp->previous->next = tmp->next;\r\n    tmp->next->previous = tmp->previous;\r\n    free(tmp);\r\n\r\n    return;\r\n}\r\n\r\nvoid display_from_entry(Node *entry_point) {\r\n    if (entry_point == NULL) {\r\n        printf(\"List is empty\");\r\n        return;\r\n    }\r\n\r\n    Node *tmp = entry_point;\r\n    do {\r\n        printf(\"%d, \", tmp->data);\r\n        tmp = tmp->next;\r\n    } while(tmp != entry_point);\r\n    \r\n    printf(\"\\n\");\r\n}\r\n\r\nNode* get_element(Node **entry_point, int data) {\r\n    if (*entry_point == NULL) {\r\n        printf(\"List is empty\");\r\n        return NULL;\r\n    }\r\n\r\n    Node* tmp = *entry_point;\r\n    while (tmp->data != data && tmp->next != *entry_point ) {\r\n        tmp = tmp->next;\r\n    }\r\n\r\n    if (tmp == (*entry_point)->previous && tmp->data != data) {\r\n        printf(\"c"]
[230.783933, "o", "ant find element with given data\\n\");\r\n        return NULL;\r\n    }\r\n\r\n    return tmp;\r\n}\r\n\r\nint list_size(Node *entry_point) {\r\n    Node *current = entry_point;\r\n    int counter = 0;\r\n    do {\r\n        printf(\"%d, \", current->data);\r\n        current = current->next;\r\n        counter ++;\r\n    } while(current != entry_point);\r\n    \r\n    printf(\"\\n\");\r\n    return counter;\r\n}\r\n\r\nNode* merge_lists(Node **entry_point_1, Node **entry_point_2) {\r\n    if (*entry_point_1 == NULL && *entry_point_2 == NULL) {\r\n        return NULL;\r\n    }\r\n    if (*entry_point_1 == NULL) {\r\n        return *entry_point_2;\r\n    }\r\n    if (*entry_point_2 == NULL) {\r\n        return *entry_point_2;\r\n    }\r\n    \r\n    Node *tmp_1 = (*entry_point_1)->previous;\r\n    Node *tmp_2 = (*entry_point_2)->previous;\r\n    \r\n    (*entry_point_1)->previous = tmp_2;\r\n    tmp_2->next = *entry_point_1;\r\n\r\n    (*entry_point_2)->previous = tmp_1;\r\n    tmp_1->next = *entry_point_2;\r\n\r\n    return *entry_point_1;\r\n}\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad3\u0007"]
[230.784071, "o", "\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad3\u001b[00m$ "]
[233.793707, "o", "g"]
[234.338918, "o", "c"]
[234.528914, "o", "c"]
[235.530102, "o", " "]
[235.670386, "o", "-"]
[236.003742, "o", "o"]
[236.579394, "o", " "]
[236.993894, "o", "z"]
[237.045604, "o", "a"]
[237.308903, "o", "d"]
[238.116281, "o", "3"]
[238.771856, "o", " "]
[239.186876, "o", "z"]
[239.32534, "o", "a"]
[239.561133, "o", "d"]
[240.432344, "o", "3"]
[241.188008, "o", "."]
[241.29848, "o", "c"]
[244.725432, "o", "\r\n"]
[244.835204, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad3\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad3\u001b[00m$ "]
[245.95627, "o", "l"]
[246.167344, "o", "s"]
[246.47153, "o", "\r\n"]
[246.479292, "o", "\u001b[0m\u001b[01;32mzad3\u001b[0m  zad3.c\r\n"]
[246.47972, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad3\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad3\u001b[00m$ "]
[247.979664, "o", "."]
[248.070653, "o", "/"]
[248.756513, "o", "z"]
[248.80669, "o", "a"]
[249.031765, "o", "d"]
[249.981157, "o", "3"]
[252.097732, "o", "\r\n\r\n\r\nBEFORE MERGE :\r\nLIST 1 :\r\n80, 40, 23, 35, 5, 13, 37, 2, 97, 36, \r\n\r\nLIST 2 :\r\n99, 72, 28, 73, 58, 55, 84, 51, 82, 82, \r\n\r\nAFTER MERGE(LIST 1, LIST 2) :\r\n80, 40, 23, 35, 5, 13, 37, 2, 97, 36, 99, 72, 28, 73, 58, 55, 84, 51, 82, 82, \r\n\r\n\r\n"]
[252.676237, "o", "Average time to acces 150th element is :  0.00000058 seconds\r\n"]
[254.365998, "o", "Average time to acces 450th element is :  0.00000169 seconds\r\n"]
[257.787155, "o", "Average time to acces 950th element is :  0.00000342 seconds\r\n"]
[259.245391, "o", "Average time to acces random element is : 0.00000146 seconds\r\n"]
[259.245757, "o", "\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad3\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad3\u001b[00m$ "]
[267.144917, "o", "#"]
[267.83042, "o", " "]
[268.044196, "o", "t"]
[268.346543, "o", "h"]
[268.671165, "o", "a"]
[268.861641, "o", "t"]
[270.059244, "o", "ś"]
[271.373789, "o", "\b\u001b[K"]
[272.922157, "o", " "]
[273.143582, "o", "i"]
[273.373082, "o", "s"]
[273.498212, "o", " "]
[274.969584, "o", "a"]
[275.12933, "o", "l"]
[275.310891, "o", "l"]
[275.886473, "o", " "]
[277.923343, "o", "f"]
[278.04319, "o", "r"]
[278.205007, "o", "o"]
[278.490436, "o", "m"]
[278.790804, "o", " "]
[279.480616, "o", "f"]
[279.811538, "o", "i"]
[280.643815, "o", "r"]
[281.077872, "o", "s"]
[281.219305, "o", "t"]
[281.604633, "o", " "]
[281.989804, "o", "l"]
[282.150145, "o", "i"]
[282.425465, "o", "s"]
[282.575433, "o", "t"]
[284.955221, "o", "\r\n\u001b]0;maurycy@maurycy-VirtualBox: ~/261705/lab01/zad3\u0007\u001b[01;32mmaurycy@maurycy-VirtualBox\u001b[00m:\u001b[01;34m~/261705/lab01/zad3\u001b[00m$ "]
[286.148123, "o", "e"]
[286.574157, "o", "x"]
[286.754515, "o", "i"]
[287.120127, "o", "t"]
[288.872801, "o", "\r\nexit\r\n"]
